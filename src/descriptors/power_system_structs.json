{
    "auto_generated_structs": [
        {
            "struct_name": "Area",
            "docstring": "A collection of buses for control purposes.\n\nThe `Area` can be specified when defining each [`ACBus`](@ref) or [`DCBus`](@ref) in the area",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "peak_active_power",
                    "comment": "Peak active power in the area",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "0.0",
                    "needs_conversion": true
                },
                {
                    "name": "peak_reactive_power",
                    "comment": "Peak reactive power in the area",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "0.0",
                    "needs_conversion": true
                },
                {
                    "name": "load_response",
                    "comment": "Load-frequency damping parameter modeling how much the load in the area changes due to changes in frequency (MW/Hz). [Example here.](https://doi.org/10.1109/NAPS50074.2021.9449687)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "0.0"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AggregationTopology"
        },
        {
            "struct_name": "AreaInterchange",
            "docstring": "Flow exchanged between Areas. This Interchange is agnostic to the lines connecting the areas. It does not substitute Interface which is the total flow across a group of lines",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow",
                    "comment": "Initial condition of active power flow on the line (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "null_value": "Area(nothing)",
                    "name": "from_area",
                    "comment": "Area from which the power is extracted",
                    "data_type": "Area"
                },
                {
                    "null_value": "Area(nothing)",
                    "name": "to_area",
                    "comment": "Area to which the power is injected",
                    "data_type": "Area"
                },
                {
                    "name": "flow_limits",
                    "null_value": "(from_to=0.0, to_from=0.0)",
                    "comment": "Max flow between the areas. It ignores lines and other branches totals",
                    "data_type": "FromTo_ToFrom",
                    "needs_conversion": true
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Branch"
        },
        {
            "struct_name": "LoadZone",
            "docstring": "A load zone for electricity price analysis.\n\nThe load zone can be specified when defining each [`ACBus`](@ref) or [`DCBus`](@ref) in the zone",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "peak_active_power",
                    "comment": "Peak active power in the zone (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "peak_reactive_power",
                    "comment": "Peak reactive power in the zone (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AggregationTopology"
        },
        {
            "struct_name": "TransmissionInterface",
            "docstring": "A collection of branches that make up an interface or corridor for the transfer of power, such as between different [`Areas`](@ref Area) or [`LoadZones`](@ref LoadZone).\n\nThe interface can be used to constrain the power flow across it",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow_limits",
                    "comment": "Minimum and maximum active power flow limits on the interface (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "violation_penalty",
                    "null_value": "0.0",
                    "comment": "Penalty cost for violating the flow limits in the interface",
                    "data_type": "Float64",
                    "default": "INFINITE_COST"
                },
                {
                    "name": "direction_mapping",
                    "comment": "Dictionary of the line `name`s in the interface and their direction of flow (1 or -1) relative to the flow of the interface",
                    "null_value": "Dict{String, Int}()",
                    "data_type": "Dict{String, Int}",
                    "default": "Dict{String, Int}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Service"
        },
        {
            "struct_name": "ACBus",
            "docstring": "An AC bus",
            "inner_constructor_check": "check_bus_params",
            "fields": [
                {
                    "name": "number",
                    "comment": "A unique bus identification number (positive integer)",
                    "null_value": "0",
                    "data_type": "Int"
                },
                {
                    "null_value": "init",
                    "name": "name",
                    "exclude_setter": true,
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "data_type": "String"
                },
                {
                    "name": "bustype",
                    "comment": "Used to describe the connectivity and behavior of this bus. [Options are listed here.](@ref acbustypes_list)",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, ACBusTypes}"
                },
                {
                    "name": "angle",
                    "comment": "angle of the bus in radians",
                    "null_value": "0.0",
                    "data_type": "Union{Nothing, Float64}",
                    "valid_range": {
                        "min": -1.571,
                        "max": 1.571
                    },
                    "validation_action": "error"
                },
                {
                    "name": "magnitude",
                    "comment": "voltage as a multiple of `base_voltage`",
                    "null_value": "0.0",
                    "data_type": "Union{Nothing, Float64}",
                    "valid_range": "voltage_limits",
                    "validation_action": "warn"
                },
                {
                    "name": "voltage_limits",
                    "comment": "limits on the voltage variation as multiples of `base_voltage`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "Union{Nothing, MinMax}"
                },
                {
                    "name": "base_voltage",
                    "comment": "the base voltage in kV",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, Float64}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "area",
                    "comment": "the area containing the bus",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, Area}",
                    "default": "nothing"
                },
                {
                    "name": "load_zone",
                    "comment": "the load zone containing the bus",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, LoadZone}",
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Bus"
        },
        {
            "struct_name": "DCBus",
            "docstring": "A DC bus",
            "fields": [
                {
                    "name": "number",
                    "comment": "A unique bus identification number (positive integer)",
                    "null_value": "0",
                    "data_type": "Int"
                },
                {
                    "null_value": "init",
                    "name": "name",
                    "exclude_setter": true,
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "data_type": "String"
                },
                {
                    "name": "magnitude",
                    "comment": "voltage as a multiple of `base_voltage`",
                    "null_value": "0.0",
                    "data_type": "Union{Nothing, Float64}",
                    "valid_range": "voltage_limits",
                    "validation_action": "warn"
                },
                {
                    "name": "voltage_limits",
                    "comment": "limits on the voltage variation as multiples of `base_voltage`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "Union{Nothing, MinMax}"
                },
                {
                    "name": "base_voltage",
                    "comment": "the base voltage in kV",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, Float64}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "area",
                    "comment": "the area containing the DC bus",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, Area}",
                    "default": "nothing"
                },
                {
                    "name": "load_zone",
                    "comment": "the load zone containing the DC bus",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, LoadZone}",
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Bus"
        },
        {
            "struct_name": "Arc",
            "docstring": "A topological directed edge connecting two buses.\n\nArcs are used to define the `from` and `to` buses when defining a line or transformer",
            "fields": [
                {
                    "name": "from",
                    "comment": "The initial bus",
                    "null_value": "ACBus(nothing)",
                    "data_type": "Bus"
                },
                {
                    "name": "to",
                    "comment": "The terminal bus",
                    "null_value": "ACBus(nothing)",
                    "data_type": "Bus"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "custom_code": "get_name(arc::Arc) = (get_name ∘ get_from)(arc) * \" -> \" * (get_name ∘ get_to)(arc)",
            "supertype": "Topology"
        },
        {
            "struct_name": "Line",
            "docstring": "An AC transmission line",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow",
                    "comment": "Initial condition of active power flow on the line (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_flow",
                    "comment": "Initial condition of reactive power flow on the line (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "null_value": "Arc(ACBus(nothing), ACBus(nothing))",
                    "name": "arc",
                    "comment": "An [`Arc`](@ref) defining this line `from` a bus `to` another bus",
                    "data_type": "Arc"
                },
                {
                    "null_value": "0.0",
                    "name": "r",
                    "data_type": "Float64",
                    "comment": "Resistance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": 0,
                        "max": 4
                    },
                    "validation_action": "warn"
                },
                {
                    "null_value": "0.0",
                    "name": "x",
                    "data_type": "Float64",
                    "comment": "Reactance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": 0,
                        "max": 4
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "b",
                    "null_value": "(from=0.0, to=0.0)",
                    "data_type": "FromTo",
                    "comment": "Shunt susceptance in pu ([`SYSTEM_BASE`](@ref per_unit)), specified both on the `from` and `to` ends of the line. These are commonly modeled with the same value",
                    "valid_range": {
                        "min": 0,
                        "max": 100
                    },
                    "validation_action": "warn"
                },
                {
                    "null_value": "0.0",
                    "name": "rating",
                    "comment": "Thermal rating (MVA). Flow on the line must be between -`rating` and `rating`. When defining a line before it is attached to a `System`, `rating` must be in pu ([`SYSTEM_BASE`](@ref per_unit)) using the base power of the `System` it will be attached to",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "angle_limits",
                    "comment": "Minimum and maximum angle limits (radians)",
                    "null_value": "(min=-1.571, max=1.571)",
                    "data_type": "MinMax",
                    "valid_range": {
                        "min": -1.571,
                        "max": 1.571
                    },
                    "validation_action": "error"
                },
                {
                    "name": "g",
                    "null_value": "(from=0.0, to=0.0)",
                    "data_type": "FromTo",
                    "comment": "Shunt conductance in pu ([`SYSTEM_BASE`](@ref per_unit)), specified both on the `from` and `to` ends of the line. These are commonly modeled with the same value",
                    "valid_range": {
                        "min": 0,
                        "max": 100
                    },
                    "validation_action": "warn",
                    "default": "(from=0.0, to=0.0)"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ACBranch"
        },
        {
            "struct_name": "MonitoredLine",
            "docstring": "An AC transmission line with additional power flow constraints specified by the system operator, more restrictive than the line's thermal limits.\n\nFor example, monitored lines can be used to restrict line flow following a contingency elsewhere in the network. See the `flow_limits` parameter. If monitoring is not needed, see [`Line`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow",
                    "comment": "Initial condition of active power flow on the line (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_flow",
                    "comment": "Initial condition of reactive power flow on the line (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "null_value": "Arc(ACBus(nothing), ACBus(nothing))",
                    "name": "arc",
                    "comment": "An [`Arc`](@ref) defining this line `from` a bus `to` another bus",
                    "data_type": "Arc"
                },
                {
                    "null_value": "0.0",
                    "name": "r",
                    "data_type": "Float64",
                    "comment": "Resistance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": 0,
                        "max": 4
                    },
                    "validation_action": "warn"
                },
                {
                    "null_value": "0.0",
                    "name": "x",
                    "data_type": "Float64",
                    "comment": "Reactance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": 0,
                        "max": 4
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "b",
                    "null_value": "(from=0.0, to=0.0)",
                    "data_type": "FromTo",
                    "comment": "Shunt susceptance in pu ([`SYSTEM_BASE`](@ref per_unit)), specified both on the `from` and `to` ends of the line. These are commonly modeled with the same value",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "flow_limits",
                    "null_value": "(from_to=0.0, to_from=0.0)",
                    "comment": "Minimum and maximum permissable flow on the line (MVA), if different from the thermal rating defined in `rating`",
                    "data_type": "FromTo_ToFrom",
                    "needs_conversion": true
                },
                {
                    "null_value": "0.0",
                    "name": "rating",
                    "data_type": "Float64",
                    "comment": "Thermal rating (MVA). Flow through the transformer must be between -`rating` and `rating`. When defining a line before it is attached to a `System`, `rating` must be in pu ([`SYSTEM_BASE`](@ref per_unit)) using the base power of the `System` it will be attached to",
                    "needs_conversion": true
                },
                {
                    "name": "angle_limits",
                    "comment": "Minimum and maximum angle limits (radians)",
                    "null_value": "(min=-1.571, max=1.571)",
                    "data_type": "MinMax",
                    "valid_range": {
                        "min": -1.571,
                        "max": 1.571
                    },
                    "validation_action": "error"
                },
                {
                    "name": "g",
                    "null_value": "(from=0.0, to=0.0)",
                    "data_type": "FromTo",
                    "comment": "Shunt conductance in pu ([`SYSTEM_BASE`](@ref per_unit)), specified both on the `from` and `to` ends of the line. These are commonly modeled with the same value",
                    "valid_range": {
                        "min": 0,
                        "max": 100
                    },
                    "validation_action": "warn",
                    "default": "(from=0.0, to=0.0)"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ACBranch"
        },
        {
            "struct_name": "PhaseShiftingTransformer",
            "docstring": "A phase-shifting transformer regulating the phase angle between two buses to control active power flow in the system.\n\nThe model uses an equivalent circuit assuming the impedance is on the High Voltage Side of the transformer. The model allocates the iron losses and magnetizing susceptance to the primary side",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow",
                    "comment": "Initial condition of active power flow through the transformer (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_flow",
                    "comment": "Initial condition of reactive power flow through the transformer (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "null_value": "Arc(ACBus(nothing), ACBus(nothing))",
                    "name": "arc",
                    "comment": "An [`Arc`](@ref) defining this transformer `from` a bus `to` another bus",
                    "data_type": "Arc"
                },
                {
                    "null_value": "0.0",
                    "name": "r",
                    "data_type": "Float64",
                    "comment": "Resistance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": 0,
                        "max": 4
                    },
                    "validation_action": "warn"
                },
                {
                    "null_value": "0.0",
                    "name": "x",
                    "data_type": "Float64",
                    "comment": "Reactance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": -2,
                        "max": 4
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "primary_shunt",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "Comment": "Shunt reactance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "tap",
                    "comment": "Normalized tap changer position for voltage control, varying between 0 and 2, with 1 centered at the nominal voltage",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "error"
                },
                {
                    "name": "α",
                    "comment": "Initial condition of phase shift (radians) between the `from` and `to` buses ",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": -1.571,
                        "max": 1.571
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "rating",
                    "comment": "Thermal rating (MVA). Flow through the transformer must be between -`rating` and `rating`. When defining a transformer before it is attached to a `System`, `rating` must be in pu ([`SYSTEM_BASE`](@ref per_unit)) using the base power of the `System` it will be attached to",
                    "null_value": "0.0",
                    "data_type": "Union{Nothing, Float64}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "phase_angle_limits",
                    "comment": "Minimum and maximum phase angle limits (radians)",
                    "null_value": "(min=-1.571, max=1.571)",
                    "data_type": "MinMax",
                    "valid_range": {
                        "min": -1.571,
                        "max": 1.571
                    },
                    "validation_action": "error",
                    "default": "(min=-1.571, max=1.571)"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ACBranch"
        },
        {
            "struct_name": "TapTransformer",
            "docstring": "A 2-winding transformer, with a tap changer for variable turns ratio.\n\nThe model uses an equivalent circuit assuming the impedance is on the High Voltage Side of the transformer. The model allocates the iron losses and magnetizing susceptance to the primary side",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow",
                    "comment": "Initial condition of active power flow through the transformer (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_flow",
                    "comment": "Initial condition of reactive power flow through the transformer (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "null_value": "Arc(ACBus(nothing), ACBus(nothing))",
                    "name": "arc",
                    "comment": "An [`Arc`](@ref) defining this transformer `from` a bus `to` another bus",
                    "data_type": "Arc"
                },
                {
                    "null_value": "0.0",
                    "name": "r",
                    "data_type": "Float64",
                    "comment": "Resistance in p.u. ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": -2,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "null_value": "0.0",
                    "name": "x",
                    "data_type": "Float64",
                    "comment": "Reactance in p.u. ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": -2,
                        "max": 4
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "primary_shunt",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "comment": "Shunt reactance in p.u. ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "tap",
                    "comment": "Normalized tap changer position for voltage control, varying between 0 and 2, with 1 centered at the nominal voltage",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "error"
                },
                {
                    "name": "rating",
                    "comment": "Thermal rating (MVA). Flow through the transformer must be between -`rating`. When defining a transformer before it is attached to a `System`, `rating` must be in pu ([`SYSTEM_BASE`](@ref per_unit)) using the base power of the `System` it will be attached to",
                    "null_value": "0.0",
                    "data_type": "Union{Nothing, Float64}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ACBranch"
        },
        {
            "struct_name": "Transformer2W",
            "docstring": "A basic 2-winding transformer.\n\nThe model uses an equivalent circuit assuming the impedance is on the High Voltage Side of the transformer. The model allocates the iron losses and magnetizing susceptance to the primary side",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow",
                    "comment": "Initial condition of active power flow through the transformer (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_flow",
                    "comment": "Initial condition of reactive power flow through the transformer (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "null_value": "Arc(ACBus(nothing), ACBus(nothing))",
                    "name": "arc",
                    "comment": "An [`Arc`](@ref) defining this transformer `from` a bus `to` another bus",
                    "data_type": "Arc"
                },
                {
                    "null_value": "0.0",
                    "name": "r",
                    "data_type": "Float64",
                    "comment": "Resistance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": -2,
                        "max": 4
                    },
                    "validation_action": "warn"
                },
                {
                    "null_value": "0.0",
                    "name": "x",
                    "data_type": "Float64",
                    "comment": "Reactance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": -2,
                        "max": 4
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "primary_shunt",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "comment": "Shunt reactance in pu ([`SYSTEM_BASE`](@ref per_unit))",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "rating",
                    "comment": "Thermal rating (MVA). Flow through the transformer must be between -`rating` and `rating`. When defining a transformer before it is attached to a `System`, `rating` must be in pu ([`SYSTEM_BASE`](@ref per_unit)) using the base power of the `System` it will be attached to",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, Float64}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ACBranch"
        },
        {
            "struct_name": "TwoTerminalHVDCLine",
            "docstring": "A High Voltage DC line, which must be connected to an [`ACBus`](@ref) on each end.\n\nThis model is appropriate for operational simulations with a linearized DC power flow approximation with losses proportional to the power flow. For modeling a DC network, see [`TModelHVDCLine`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow",
                    "comment": "Initial condition of active power flow on the line (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "null_value": "Arc(ACBus(nothing), ACBus(nothing))",
                    "name": "arc",
                    "comment": "An [`Arc`](@ref) defining this line `from` a bus `to` another bus",
                    "data_type": "Arc"
                },
                {
                    "name": "active_power_limits_from",
                    "comment": "Minimum and maximum active power flows to the FROM node (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "active_power_limits_to",
                    "comment": "Minimum and maximum active power flows to the TO node (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_limits_from",
                    "comment": "Minimum and maximum reactive power limits to the FROM node (MVAR)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_limits_to",
                    "comment": "Minimum and maximum reactive power limits to the TO node (MVAR)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "loss",
                    "comment": "Loss model coefficients. It accepts a linear model with a constant loss (MW) and a proportional loss rate (MW of loss per MW of flow). It also accepts a Piecewise loss, with N segments to specify different proportional losses for different segments.",
                    "null_value": "LinearCurve(0.0)",
                    "data_type": "Union{LinearCurve, PiecewiseIncrementalCurve}",
                    "default": "LinearCurve(0.0)"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ACBranch"
        },
        {
            "struct_name": "TwoTerminalVSCDCLine",
            "docstring": "A Voltage Sourced Converter (VSC)-HVDC transmission line.\n\nAs implemented in [\"Power System Modelling and Scripting\"](https://link.springer.com/book/10.1007/978-3-642-13669-6) by Federico Milano, Chapter 18, Page 397. This model is suitable for dynamic simulations",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow",
                    "comment": "Initial condition of active power flow on the line (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "null_value": "Arc(ACBus(nothing), ACBus(nothing))",
                    "name": "arc",
                    "comment": "An [`Arc`](@ref) defining this line `from` a bus `to` another bus",
                    "data_type": "Arc"
                },
                {
                    "name": "rectifier_tap_limits",
                    "comment": "Minimum and maximum rectifier tap limits as a ratio between the primary and secondary side voltages",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "rectifier_xrc",
                    "comment": "Rectifier commutation reactance in p.u. ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "rectifier_firing_angle",
                    "comment": "Minimum and maximum rectifier firing angle (α) (radians)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "inverter_tap_limits",
                    "comment": "Minimum and maximum inverter tap limits as a ratio between the primary and secondary side voltages",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "inverter_xrc",
                    "comment": "Inverter commutation reactance in p.u. ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "inverter_extinction_angle",
                    "comment": "Minimum and maximum inverter extinction angle (γ) (radians)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ACBranch"
        },
        {
            "struct_name": "TModelHVDCLine",
            "docstring": "A High Voltage DC transmission line for modeling DC transmission networks.\n\nThis line must be connected to a [`DCBus`](@ref) on each end. It uses a T-Model of the line impedance. This is suitable for operational simulations with a multi-terminal DC network",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "active_power_flow",
                    "comment": "Initial condition of active power flow on the line (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "null_value": "Arc(DCBus(nothing), DCBus(nothing))",
                    "name": "arc",
                    "comment": "An [`Arc`](@ref) defining this line `from` a bus `to` another bus",
                    "data_type": "Arc"
                },
                {
                    "null_value": "0.0",
                    "name": "r",
                    "data_type": "Float64",
                    "comment": "Total series Resistance in p.u. ([`SYSTEM_BASE`](@ref per_unit)), split equally on both sides of the shunt capacitance"
                },
                {
                    "null_value": "0.0",
                    "name": "l",
                    "data_type": "Float64",
                    "comment": "Total series Inductance in p.u. ([`SYSTEM_BASE`](@ref per_unit)), split equally on both sides of the shunt capacitance"
                },
                {
                    "null_value": "0.0",
                    "name": "c",
                    "data_type": "Float64",
                    "comment": "Shunt capacitance in p.u. ([`SYSTEM_BASE`](@ref per_unit))"
                },
                {
                    "name": "active_power_limits_from",
                    "comment": "Minimum and maximum active power flows to the FROM node (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "active_power_limits_to",
                    "comment": "Minimum and maximum active power flows to the TO node (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DCBranch"
        },
        {
            "struct_name": "InterruptiblePowerLoad",
            "docstring": "A [static](@ref S) power load that can be compensated for temporary or continuous interruptions to its requested demand.\n\n These loads are most commonly used for operational optimizations and can be used to model, for example, large commercial and industrial customers enrolled in demand response programs. This load has a target demand profile (set by a [`max_active_power` time series](@ref ts_data) for an operational simulation) that can be reduced to satisfy other system needs. For simpler loads without an operating cost for demand response, see [`PowerLoad`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial steady state active power demand (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial steady state reactive power demand (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_active_power",
                    "comment": "Maximum active power (MW) that this load can demand",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_reactive_power",
                    "comment": "Maximum reactive power (MVAR) that this load can demand",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "base_power",
                    "comment": "Base power (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "operation_cost",
                    "null_value": "LoadCost(nothing)",
                    "data_type": "Union{LoadCost, MarketBidCost}",
                    "comment": "[`OperationalCost`](@ref) of interrupting load"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ControllableLoad"
        },
        {
            "struct_name": "FixedAdmittance",
            "docstring": "A fixed admittance.\n\nMost often used in dynamics or AC power flow studies as a source of reactive power",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "Y",
                    "comment": "Fixed admittance in p.u. ([`SYSTEM_BASE`](@ref per_unit))",
                    "null_value": "0.0",
                    "data_type": "Complex{Float64}"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection model for admittance",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ElectricLoad"
        },
        {
            "struct_name": "SwitchedAdmittance",
            "docstring": "A switched admittance, with discrete steps to adjust the admittance.\n\nMost often used in power flow studies, iterating over the steps to see impacts of admittance on the results. Total admittance is calculated as: `Y` + `number_of_steps` * `Y_increase`",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "Y",
                    "comment": "Initial admittance at N = 0",
                    "null_value": "0.0",
                    "data_type": "Complex{Float64}"
                },
                {
                    "name": "number_of_steps",
                    "comment": "Number of steps for adjustable shunt",
                    "null_value": "0",
                    "data_type": "Int",
                    "default": "0"
                },
                {
                    "name": "Y_increase",
                    "comment": "Admittance increment for each of step increase",
                    "null_value": "0",
                    "data_type": "Complex{Float64}",
                    "default": "0"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection model for admittance",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ElectricLoad"
        },
        {
            "struct_name": "PowerLoad",
            "docstring": "A [static](@ref S) power load, most commonly used for operational models such as power flow and operational optimizations.\n\nThis load consumes a set amount of power (set by `active_power` for a power flow simulation or a `max_active_power` time series for an operational simulation). For loads that can be compensated for load interruptions through demand response programs, see [`InterruptiblePowerLoad`](@ref). For voltage-dependent loads used in [dynamics](@ref D) modeling, see [`StandardLoad`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial steady-state active power demand (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial steady-state reactive power demand (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "base_power",
                    "comment": "Base power (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "max_active_power",
                    "comment": "Maximum active power (MW) that this load can demand",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_reactive_power",
                    "comment": "Maximum reactive power (MVAR) that this load can demand",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "StaticLoad"
        },
        {
            "struct_name": "StandardLoad",
                "docstring": "A voltage-dependent [ZIP load](@ref Z), most commonly used for dynamics modeling.\n\nA `StandardLoad` breaks the ZIP into three pieces: Z (constant impedance), I (constant current), and P (constant power), according to `P = P_P * V^0 + P_I * V^1 + P_Z * V^2` for active power and `Q = Q_P * V^0 + Q_I * V^1 + Q_Z * V^2` for reactive power. (Voltage V is in per unit.)\n\nFor an alternative exponential formulation of the ZIP model, see [`ExponentialLoad`](@ref). For a simpler load model with no voltage dependency, see [`PowerLoad`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the load (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "constant_active_power",
                    "comment": "Constant active power demand in MW (P_P)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "0.0",
                    "needs_conversion": true
                },
                {
                    "name": "constant_reactive_power",
                    "comment": "Constant reactive power demand in MVAR (Q_P)",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "impedance_active_power",
                    "comment": "Active power coefficient in MW for constant impedance load (P_Z)",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "impedance_reactive_power",
                    "comment": "Reactive power coefficient in MVAR for constant impedance load (Q_Z)",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "current_active_power",
                    "comment": "Active power coefficient in MW for constant current load (P_I)",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "current_reactive_power",
                    "comment": "Reactive power coefficient in MVAR for constant current load (Q_I)",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_constant_active_power",
                    "comment": "Maximum active power (MW) drawn by constant power load",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_constant_reactive_power",
                    "comment": "Maximum reactive power (MVAR) drawn by constant power load",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_impedance_active_power",
                    "comment": "Maximum active power (MW) drawn by constant impedance load",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_impedance_reactive_power",
                    "comment": "Maximum reactive power (MVAR) drawn by constant impedance load",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_current_active_power",
                    "comment": "Maximum active power (MW) drawn by constant current load",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_current_reactive_power",
                    "comment": "Maximum reactive power (MVAR) drawn by constant current load",
                    "null_value": "0.0",
                    "default": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "StaticLoad"
        },
        {
            "struct_name": "ExponentialLoad",
            "docstring": "A voltage-dependent [ZIP load](@ref Z), most commonly used for dynamics modeling.\n\nAn `ExponentialLoad` models active power as P = P0 * V^α and reactive power as Q = Q0 * V^β, where the exponents α and β select govern the voltage dependency. For an alternative three-part formulation of the ZIP model, see [`StandardLoad`](@ref). For a simpler load model with no voltage dependency, see [`PowerLoad`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Active power coefficient, P0 (MW)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Reactive power coefficient, Q0 (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "α",
                    "comment": "Exponent relating voltage dependency for active power. 0 = constant power only, 1 = constant current only, and 2 = constant impedance only",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "β",
                    "comment": "Exponent relating voltage dependency for reactive power. 0 = constant power only, 1 = constant current only, and 2 = constant impedance only",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "base_power",
                    "comment": "Base power (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "max_active_power",
                    "comment": "Maximum active power (MW) that this load can demand",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "max_reactive_power",
                    "comment": "Maximum reactive power (MVAR) that this load can demand",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "StaticLoad"
        },
        {
            "struct_name": "SingleCageInductionMachine",
            "docstring": "Parameters of 5-states three-phase single cage induction machine with quadratic torque-speed relationship",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "R_s",
                    "comment": "Armature stator resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_r",
                    "comment": "Rotor resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_ls",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Stator Leakage Reactance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_lr",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Rotor Leakage Reactance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_m",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Stator-Rotor Mutual Reactance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "H",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Motor Inertia Constant [s]",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "A",
                    "data_type": "Float64",
                    "null_value": "0.0",
                    "comment": "Torque-Speed Quadratic Term",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "B",
                    "data_type": "Float64",
                    "null_value": "0.0",
                    "comment": "Torque-Speed Linear Term",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "C",
                    "comment": "(**Do not modify.**) Torque-Speed Constant Term",
                    "internal_default": "PowerSystems.calculate_IM_torque_params(A, B)",
                    "data_type": "Float64"
                },
                {
                    "name": "τ_ref",
                    "comment": "Reference torque parameter",
                    "internal_default": "1.0",
                    "data_type": "Float64"
                },
                {
                    "name": "B_shunt",
                    "comment": "Susceptance Initialization Corrector Term",
                    "internal_default": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "X_ad",
                    "comment": "(**Do not modify.**) Equivalent d-axis reactance",
                    "internal_default": "(1.0 / X_m + 1.0 / X_ls + 1.0 / X_lr)^(-1)",
                    "data_type": "Float64"
                },
                {
                    "name": "X_aq",
                    "comment": "(**Do not modify.**) Equivalent q-axis reactance",
                    "internal_default": "X_ad",
                    "data_type": "Float64"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tψ_qs: stator flux in the q-axis,\n\tψ_ds: stator flux in the d-axis,\n\tψ_qr: rotor flux in the q-axis,\n\tψ_dr: rotor flux in the d-axis, \n\tωr: Rotor speed [pu],",
                    "internal_default": "[:ψ_qs, :ψ_ds, :ψ_qr, :ψ_dr, :ωr]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SingleCageInductionMachine has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DynamicInjection"
        },
        {
            "struct_name": "SimplifiedSingleCageInductionMachine",
            "docstring": "Parameters of 3-states three-phase single cage induction machine with quadratic torque-speed relationship",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "R_s",
                    "comment": "Armature stator resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_r",
                    "comment": "Rotor resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_ls",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Stator Leakage Reactance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_lr",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Rotor Leakage Reactance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_m",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Stator-Rotor Mutual Reactance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "H",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Motor Inertia Constant [s]",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "A",
                    "data_type": "Float64",
                    "null_value": "0.0",
                    "comment": "Torque-Speed Quadratic Term",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "B",
                    "data_type": "Float64",
                    "null_value": "0.0",
                    "comment": "Torque-Speed Linear Term",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "C",
                    "comment": "(**Do not modify.**) Torque-Speed Constant Term",
                    "internal_default": "PowerSystems.calculate_IM_torque_params(A, B)",
                    "data_type": "Float64"
                },
                {
                    "name": "τ_ref",
                    "comment": "Reference torque parameter",
                    "internal_default": "1.0",
                    "data_type": "Float64"
                },
                {
                    "name": "B_shunt",
                    "comment": "Susceptance Initialization Corrector Term",
                    "internal_default": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "X_ss",
                    "comment": "(**Do not modify.**) Stator self reactance",
                    "internal_default": "X_ls + X_m",
                    "data_type": "Float64"
                },
                {
                    "name": "X_rr",
                    "comment": "(**Do not modify.**) Rotor self reactance",
                    "internal_default": "X_lr + X_m",
                    "data_type": "Float64"
                },
                {
                    "name": "X_p",
                    "comment": "(**Do not modify.**) Transient reactance",
                    "internal_default": "X_ss - X_m^2 / X_rr",
                    "data_type": "Float64"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tψ_qr: rotor flux in the q-axis,\n\tψ_dr: rotor flux in the d-axis, \n\tωr: Rotor speed [pu],",
                    "internal_default": "[:ψ_qr, :ψ_dr, :ωr]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SimplifiedSingleCageInductionMachine has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DynamicInjection"
        },
        {
            "struct_name": "DynamicExponentialLoad",
            "docstring": "Parameters of 2-states of a generic dynamic load model based on [\"Voltage stability analysis using generic dynamic load models.\"](https://doi.org/10.1109/59.317575)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "a",
                    "comment": "Active power static exponential coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "b",
                    "comment": "Reactive power static exponential coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "α",
                    "comment": "Active power transient exponential coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "β",
                    "comment": "Reactive power transient exponential coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T_p",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Active Power Time Constant",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T_q",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactive Power Time Constant",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the load (MVA) for [per unitization](@ref per_unit)",
                    "internal_default": "100.0",
                    "data_type": "Float64"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tx_p: Integrator state of the active power,\n\tx_q: Integrator state of the reactive power,",
                    "internal_default": "[:x_p, :x_q]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) DynamicExponentialLoad has 2 states",
                    "internal_default": 2,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DynamicInjection"
        },
        {
            "struct_name": "ActiveConstantPowerLoad",
            "docstring": "Parameters of 12-[states](@ref S) active power load based on the paper, [\"Dynamic Stability of a Microgrid With an Active Load.\"](https://doi.org/10.1109/TPEL.2013.2241455)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "r_load",
                    "comment": "DC-side resistor",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "c_dc",
                    "comment": "DC-side capacitor",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rf",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Converter side filter resistance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "lf",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Converter side filter inductance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "cf",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "AC Converter filter capacitance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rg",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Network side filter resistance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "lg",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Network side filter inductance",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kp_pll",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Proportional constant for PI-PLL block",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ki_pll",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Integral constant for PI-PLL block",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kpv",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Proportional constant for Voltage Control block",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kiv",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Integral constant for Voltage Control block",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kpc",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Proportional constant for Current Control block",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kic",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Integral constant for Current Control block",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": 0.0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "P_ref",
                    "comment": "Reference active power (pu)",
                    "internal_default": "1.0",
                    "data_type": "Float64"
                },
                {
                    "name": "Q_ref",
                    "comment": "Reference reactive power (pu)",
                    "internal_default": "1.0",
                    "data_type": "Float64"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference voltage (pu)",
                    "internal_default": "1.0",
                    "data_type": "Float64"
                },
                {
                    "name": "ω_ref",
                    "comment": "Reference frequency (pu)",
                    "internal_default": "1.0",
                    "data_type": "Float64"
                },
                {
                    "name": "is_filter_differential",
                    "comment": "Boolean to decide if filter [states](@ref S) are differential or algebraic",
                    "internal_default": "1",
                    "data_type": "Int"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tθ_pll: PLL deviation angle, \n\tϵ_pll: PLL integrator state, \n\tη: DC-voltage controller integrator state, \n\tv_dc: DC voltage at the capacitor, \n\tγd: d-axis Current controller integrator state, \n\tγq: q-axis Current controller integrator state, \n\tir_cnv: Real current out of the converter,\n\tii_cnv: Imaginary current out of the converter,\n\tvr_filter: Real voltage at the filter's capacitor,\n\tvi_filter: Imaginary voltage at the filter's capacitor,\n\tir_filter: Real current out of the filter,\n\tii_filter: Imaginary current out of the filter",
                    "internal_default": "[:θ_pll, :ϵ_pll, :η, :v_dc, :γd, :γq, :ir_cnv, :ii_cnv, :vr_filter, :vi_filter, :ir_filter, :ii_filter]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ActiveConstantPowerLoad has 12 states",
                    "internal_default": 12,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DynamicInjection"
        },
        {
            "struct_name": "InterconnectingConverter",
            "docstring": "Interconnecting Power Converter (IPC) for transforming power from an ACBus to a DCBus",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus on the AC side of this converter",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "dc_bus",
                    "comment": "Bus on the DC side of this converter",
                    "null_value": "DCBus(nothing)",
                    "data_type": "DCBus"
                },
                {
                    "name": "active_power",
                    "comment": "Active power (MW) on the DC side",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": "active_power_limits",
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "rating",
                    "comment": "Maximum output power rating of the converter (MVA)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "active_power_limits",
                    "comment": "Minimum and maximum stable active power levels (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the converter in MVA",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "dc_current",
                    "comment": "DC current (A) on the converter",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "0.0"
                },
                {
                    "name": "max_dc_current",
                    "comment": "Maximum stable dc current limits (A)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "1e8"
                },
                {
                    "name": "loss_function",
                    "comment": "Linear or quadratic loss function with respect to the converter current",
                    "null_value": "LinearCurve(0.0)",
                    "data_type": "Union{LinearCurve, QuadraticCurve}",
                    "default": "LinearCurve(0.0)"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "StaticInjection"
        },
        {
            "struct_name": "CSVGN1",
            "docstring": "Parameters of static shunt compensator: CSVGN1 in PSSE",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "K",
                    "comment": "Gain in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T1",
                    "comment": "Time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T2",
                    "comment": "Time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T3",
                    "comment": "Time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    }
                },
                {
                    "name": "T4",
                    "comment": "Time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T5",
                    "comment": "Time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Rmin",
                    "comment": "Reactor minimum Mvar",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Vmax",
                    "comment": "Maximum voltage in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Vmin",
                    "comment": "Minimum voltage in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "CBase",
                    "comment": "Capacitor (MVAR)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "R_th",
                    "comment": "Source Thevenin resistance",
                    "internal_default": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "X_th",
                    "comment": "Source Thevenin reactance",
                    "internal_default": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tthy: thyristor,\n\tvr1: regulator output 1,\n\tvr2: regulator output 2",
                    "internal_default": "[:thy, :vr1, :vr2]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) CSVGN1 has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DynamicInjection"
        },
        {
            "struct_name": "HydroEnergyReservoir",
            "docstring": "A hydropower generator with an upper reservoir, offering some energy storage and operational flexibility.\n\nFor hydro generators with pumped storage, see [`HydroPumpedStorage`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial active power set point of the unit in MW. For power flow, this is the steady state operating point of the system. For production cost modeling, this may or may not be used as the initial starting point for the solver, depending on the solver used",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial reactive power set point of the unit (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": "reactive_power_limits",
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "rating",
                    "comment": "Maximum output power rating of the unit (MVA)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "prime_mover_type",
                    "comment": "Prime mover technology according to EIA 923. Options are listed [here](@ref pm_list)",
                    "null_value": "PrimeMovers.HY",
                    "data_type": "PrimeMovers"
                },
                {
                    "name": "active_power_limits",
                    "comment": "Minimum and maximum stable active power levels (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_limits",
                    "comment": "Minimum and maximum reactive power limits. Set to `Nothing` if not applicable",
                    "validation_action": "warn",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, MinMax}",
                    "needs_conversion": true
                },
                {
                    "name": "ramp_limits",
                    "comment": "ramp up and ramp down limits in MW/min",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "time_limits",
                    "comment": "Minimum up and Minimum down time limits in hours",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "storage_capacity",
                    "comment": "Maximum storage capacity in the reservoir (units can be p.u-hr or m^3)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "inflow",
                    "comment": "Baseline inflow into the reservoir (units can be p.u. or m^3/hr)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "initial_storage",
                    "comment": "Initial storage capacity in the reservoir (units can be p.u-hr or m^3)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "operation_cost",
                    "null_value": "HydroGenerationCost(nothing)",
                    "data_type": "Union{HydroGenerationCost, StorageCost, MarketBidCost}",
                    "default": "HydroGenerationCost(nothing)",
                    "comment": "[`OperationalCost`](@ref) of generation"
                },
                {
                    "name": "storage_target",
                    "comment": "Storage target at the end of simulation as a fraction of storage capacity",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "1.0"
                },
                {
                    "name": "conversion_factor",
                    "comment": "Conversion factor from flow/volume to energy: m^3 -> p.u-hr",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "1.0"
                },
                {
                    "null_value": "false",
                    "name": "status",
                    "comment": "Initial commitment condition at the start of a simulation (`true` = on or `false` = off)",
                    "data_type": "Bool",
                    "default": "false"
                },
                {
                    "null_value": "INFINITE_TIME",
                    "name": "time_at_status",
                    "comment": "Time (e.g., `Hours(6)`) the generator has been on or off, as indicated by `status`",
                    "data_type": "Float64",
                    "default": "INFINITE_TIME"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "HydroGen"
        },
        {
            "struct_name": "HydroDispatch",
            "docstring": "A hydropower generator without a reservoir, suitable for modeling run-of-river hydropower.\n\nFor hydro generators with an upper reservoir, see [`HydroEnergyReservoir`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial active power set point of the unit in MW. For power flow, this is the steady state operating point of the system. For production cost modeling, this may or may not be used as the initial starting point for the solver, depending on the solver used",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial reactive power set point of the unit (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": "reactive_power_limits",
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "rating",
                    "comment": "Maximum output power rating of the unit (MVA)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "prime_mover_type",
                    "comment": "Prime mover technology according to EIA 923. Options are listed [here](@ref pm_list)",
                    "null_value": "PrimeMovers.HY",
                    "data_type": "PrimeMovers"
                },
                {
                    "name": "active_power_limits",
                    "comment": "Minimum and maximum stable active power levels (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_limits",
                    "comment": "Minimum and maximum reactive power limits. Set to `Nothing` if not applicable",
                    "validation_action": "warn",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, MinMax}",
                    "needs_conversion": true
                },
                {
                    "name": "ramp_limits",
                    "comment": "ramp up and ramp down limits in MW/min",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "time_limits",
                    "comment": "Minimum up and Minimum down time limits in hours",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "operation_cost",
                    "null_value": "HydroGenerationCost(nothing)",
                    "data_type": "Union{HydroGenerationCost, MarketBidCost}",
                    "default": "HydroGenerationCost(nothing)",
                    "comment": "[`OperationalCost`](@ref) of generation"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "HydroGen"
        },
        {
            "struct_name": "HydroPumpedStorage",
            "docstring": "A hydropower generator with pumped storage and upper and lower reservoirs. ",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial active power set point of the unit in MW. For power flow, this is the steady state operating point of the system. For production cost modeling, this may or may not be used as the initial starting point for the solver, depending on the solver used",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial reactive power set point of the unit (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "rating",
                    "comment": "Maximum output power rating of the unit (MVA)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "prime_mover_type",
                    "comment": "Prime mover technology according to EIA 923. Options are listed [here](@ref pm_list)",
                    "null_value": "PrimeMovers.HY",
                    "data_type": "PrimeMovers"
                },
                {
                    "name": "active_power_limits",
                    "comment": "Minimum and maximum stable active power levels (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_limits",
                    "comment": "Minimum and maximum reactive power limits. Set to `Nothing` if not applicable",
                    "validation_action": "warn",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, MinMax}",
                    "needs_conversion": true
                },
                {
                    "name": "ramp_limits",
                    "comment": "ramp up and ramp down limits in MW/min",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "time_limits",
                    "comment": "Minimum up and Minimum down time limits in hours",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "rating_pump",
                    "comment": "Maximum power withdrawal (MVA) of the pump",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "active_power_limits_pump",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_limits_pump",
                    "validation_action": "warn",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, MinMax}",
                    "needs_conversion": true
                },
                {
                    "name": "ramp_limits_pump",
                    "comment": "ramp up and ramp down limits in MW/min of pump",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "time_limits_pump",
                    "comment": "Minimum up and Minimum down time limits of pump in hours",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "storage_capacity",
                    "comment": "Maximum storage capacity in the upper and lower reservoirs (units can be p.u-hr or m^3)",
                    "null_value": "(up=0.0, down=0.0)",
                    "data_type": "UpDown",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "inflow",
                    "comment": "Baseline inflow into the upper reservoir (units can be p.u. or m^3/hr)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "outflow",
                    "comment": "Baseline outflow from the lower reservoir (units can be p.u. or m^3/hr)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "initial_storage",
                    "comment": "Initial storage capacity in the upper and lower reservoir (units can be p.u-hr or m^3)",
                    "null_value": "(up=0.0, down=0.0)",
                    "data_type": "UpDown",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "storage_target",
                    "comment": "Storage target of upper reservoir at the end of simulation as ratio of storage capacity",
                    "null_value": "(up=0.0, down=0.0)",
                    "data_type": "UpDown",
                    "default": "(up=1.0, down=1.0)"
                },
                {
                    "name": "operation_cost",
                    "null_value": "HydroGenerationCost(nothing)",
                    "data_type": "Union{HydroGenerationCost, StorageCost, MarketBidCost}",
                    "default": "HydroGenerationCost(nothing)",
                    "comment": "[`OperationalCost`](@ref) of generation"
                },
                {
                    "name": "pump_efficiency",
                    "comment": "Pumping efficiency [0, 1.0]",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "1.0",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "conversion_factor",
                    "comment": "Conversion factor from flow/volume to energy: m^3 -> p.u-hr",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "1.0"
                },
                {
                    "name": "status",
                    "comment": "Initial commitment condition at the start of a simulation (`PumpHydroStatus.PUMP`, `PumpHydroStatus.GEN`, or `PumpHydroStatus.OFF`)",
                    "data_type": "PumpHydroStatus",
                    "default": "PumpHydroStatus.OFF",
                    "null_value": "PumpHydroStatus.OFF"
                },
                {
                    "null_value": "INFINITE_TIME",
                    "name": "time_at_status",
                    "comment": "Time (e.g., `Hours(6)`) the generator has been generating, pumping, or off, as indicated by `status`",
                    "data_type": "Float64",
                    "default": "INFINITE_TIME"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "HydroGen"
        },
        {
            "struct_name": "RenewableDispatch",
            "docstring": "A renewable (e.g., wind or solar) generator whose output can be curtailed to satisfy power system constraints.\n\nThese generators can also participate in reserves markets, including upwards reserves by proactively curtailing some available power (based on its [`max_active_power` time series](@ref ts_data)). Example uses include: a utility-scale wind or solar generator whose PPA allows curtailment. For non-curtailable or must-take renewables, see [`RenewableNonDispatch`](@ref).\n\nRenewable generators do not have a `max_active_power` parameter, which is instead calculated when calling [`get_max_active_power()`](@ref get_max_active_power(d::T) where {T <: RenewableGen})",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial active power set point of the unit in MW. For power flow, this is the steady state operating point of the system. For production cost modeling, this may or may not be used as the initial starting point for the solver, depending on the solver used",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial reactive power set point of the unit (MVAR), used in some production cost modeling simulations. To set the reactive power in a load flow, use `power_factor`",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "rating",
                    "comment": "Maximum output power rating of the unit (MVA)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true,
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "prime_mover_type",
                    "comment": "Prime mover technology according to EIA 923. Options are listed [here](@ref pm_list)",
                    "null_value": "PrimeMovers.OT",
                    "data_type": "PrimeMovers"
                },
                {
                    "name": "reactive_power_limits",
                    "comment": "Minimum and maximum reactive power limits, used in some production cost model simulations and in power flow if the unit is connected to a [`PV`](@ref acbustypes_list) bus. Set to `nothing` if not applicable",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, MinMax}",
                    "needs_conversion": true
                },
                {
                    "name": "power_factor",
                    "comment": "Power factor [0, 1] set-point, used in some production cost modeling and in load flow if the unit is connected to a [`PQ`](@ref acbustypes_list) bus",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "operation_cost",
                    "null_value": "RenewableGenerationCost(nothing)",
                    "data_type": "Union{RenewableGenerationCost, MarketBidCost}",
                    "comment": "[`OperationalCost`](@ref) of generation"
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "RenewableGen"
        },
        {
            "struct_name": "RenewableNonDispatch",
            "docstring": "A non-dispatchable (i.e., non-curtailable or must-take) renewable generator.\n\nIts output is equal to its [`max_active_power` time series](@ref ts_data) by default. Example use: an aggregation of behind-the-meter distributed energy resources like rooftop solar. For curtailable or downward dispatachable generation, see [`RenewableDispatch`](@ref).\n\nRenewable generators do not have a `max_active_power` parameter, which is instead calculated when calling [`get_max_active_power()`](@ref get_max_active_power(d::T) where {T <: RenewableGen})",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial active power set point of the unit in MW. For power flow, this is the steady state operating point of the system. For production cost modeling, this may or may not be used as the initial starting point for the solver, depending on the solver used",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial reactive power set point of the unit (MVAR), used in some production cost modeling simulations. To set the reactive power in a load flow, use `power_factor`",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "rating",
                    "comment": "Maximum output power rating of the unit (MVA)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "prime_mover_type",
                    "comment": "Prime mover technology according to EIA 923. Options are listed [here](@ref pm_list)",
                    "null_value": "PrimeMovers.OT",
                    "data_type": "PrimeMovers"
                },
                {
                    "name": "power_factor",
                    "comment": "Power factor [0, 1] set-point, used in some production cost modeling and in load flow if the unit is connected to a [`PQ`](@ref acbustypes_list) bus",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "RenewableGen"
        },
        {
            "struct_name": "ThermalStandard",
            "docstring": "A thermal generator, such as a fossil fuel and nuclear generator.\n\nThis is a standard representation with options to include a minimum up time, minimum down time, and ramp limits. For a more detailed representation the start-up and shut-down processes, including hot starts, see [`ThermalMultiStart`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "null_value": "false",
                    "name": "status",
                    "comment": "Initial commitment condition at the start of a simulation (`true` = on or `false` = off)",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial active power set point of the unit in MW. For power flow, this is the steady state operating point of the system. For production cost modeling, this may or may not be used as the initial starting point for the solver, depending on the solver used",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": "active_power_limits",
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial reactive power set point of the unit (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": "reactive_power_limits",
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "rating",
                    "comment": "Maximum output power rating of the unit (MVA)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "active_power_limits",
                    "comment": "Minimum and maximum stable active power levels (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_limits",
                    "comment": "Minimum and maximum reactive power limits. Set to `Nothing` if not applicable",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, MinMax}",
                    "needs_conversion": true
                },
                {
                    "name": "ramp_limits",
                    "comment": "ramp up and ramp down limits in MW/min",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "operation_cost",
                    "null_value": "ThermalGenerationCost(nothing)",
                    "data_type": "Union{ThermalGenerationCost, MarketBidCost}",
                    "comment": "[`OperationalCost`](@ref) of generation"
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "time_limits",
                    "comment": "Minimum up and Minimum down time limits in hours",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "default": "nothing"
                },
                {
                    "name": "must_run",
                    "comment": "Set to `true` if the unit is must run",
                    "null_value": "false",
                    "data_type": "Bool",
                    "default": "false"
                },
                {
                    "name": "prime_mover_type",
                    "comment": "Prime mover technology according to EIA 923. Options are listed [here](@ref pm_list)",
                    "null_value": "PrimeMovers.OT",
                    "data_type": "PrimeMovers",
                    "default": "PrimeMovers.OT"
                },
                {
                    "name": "fuel",
                    "comment": "Prime mover fuel according to EIA 923. Options are listed [here](@ref tf_list)",
                    "null_value": "ThermalFuels.OTHER",
                    "data_type": "ThermalFuels",
                    "default": "ThermalFuels.OTHER"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "null_value": "INFINITE_TIME",
                    "name": "time_at_status",
                    "comment": "Time (e.g., `Hours(6)`) the generator has been on or off, as indicated by `status`",
                    "data_type": "Float64",
                    "default": "INFINITE_TIME"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ThermalGen"
        },
        {
            "struct_name": "ThermalMultiStart",
            "docstring": "A thermal generator, such as a fossil fuel or nuclear generator, that can start-up again from a *hot*, *warm*, or *cold* state.\n\n`ThermalMultiStart` has a detailed representation of the start-up process based on the time elapsed since the last shut down, as well as a detailed shut-down process. The model is based on [\"Tight and Compact MILP Formulation for the Thermal Unit Commitment Problem.\"](https://doi.org/10.1109/TPWRS.2013.2251373). For a simplified representation of the start-up and shut-down processes, see [`ThermalStandard`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "null_value": "false",
                    "name": "status",
                    "comment": "Initial commitment condition at the start of a simulation (`true` = on or `false` = off)",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial active power set point of the unit in MW. For power flow, this is the steady state operating point of the system. For production cost modeling, this may or may not be used as the initial starting point for the solver, depending on the solver used",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": "active_power_limits",
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial reactive power set point of the unit (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": "reactive_power_limits",
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "rating",
                    "comment": "Maximum output power rating of the unit (MVA)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "prime_mover_type",
                    "comment": "Prime mover technology according to EIA 923. Options are listed [here](@ref pm_list)",
                    "null_value": "PrimeMovers.OT",
                    "data_type": "PrimeMovers"
                },
                {
                    "name": "fuel",
                    "comment": "Prime mover fuel according to EIA 923. Options are listed [here](@ref tf_list)",
                    "null_value": "ThermalFuels.OTHER",
                    "data_type": "ThermalFuels"
                },
                {
                    "name": "active_power_limits",
                    "comment": "Minimum and maximum stable active power levels (MW)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_limits",
                    "comment": "Minimum and maximum reactive power limits. Set to `Nothing` if not applicable",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, MinMax}",
                    "needs_conversion": true
                },
                {
                    "name": "ramp_limits",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "power_trajectory",
                    "comment": "Power trajectory the unit will take during the start-up and shut-down ramp process",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, StartUpShutDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "time_limits",
                    "comment": "Minimum up and Minimum down time limits in hours",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, UpDown}",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "start_time_limits",
                    "comment": "Time limits for start-up based on turbine temperature in hours",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, StartUpStages}"
                },
                {
                    "name": "start_types",
                    "comment": "Number of start-up based on turbine temperature, where `1` = *hot*, `2` = *warm*, and `3` = *cold*",
                    "null_value": "1",
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 3
                    },
                    "validation_action": "error"
                },
                {
                    "name": "operation_cost",
                    "null_value": "ThermalGenerationCost(nothing)",
                    "data_type": "Union{ThermalGenerationCost, MarketBidCost}",
                    "comment": "[`OperationalCost`](@ref) of generation"
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "time_at_status",
                    "comment": "Time (e.g., `Hours(6)`) the generator has been on or off, as indicated by `status`",
                    "null_value": "INFINITE_TIME",
                    "data_type": "Float64",
                    "default": "INFINITE_TIME"
                },
                {
                    "name": "must_run",
                    "comment": "Set to `true` if the unit is must run",
                    "null_value": "false",
                    "data_type": "Bool",
                    "default": "false"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ThermalGen"
        },
        {
            "struct_name": "EnergyReservoirStorage",
            "docstring": "An energy storage device, modeled as a generic energy reservoir.\n\nThis is suitable for modeling storage charging and discharging with average efficiency losses, ignoring the physical dynamics of the storage unit. A variety of energy storage types and chemistries can be modeled with this approach. For pumped hydro storage, alternatively see [`HydroPumpedStorage`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "prime_mover_type",
                    "comment": "Prime mover technology according to EIA 923. Options are listed [here](@ref pm_list)",
                    "null_value": "PrimeMovers.BA",
                    "data_type": "PrimeMovers"
                },
                {
                    "name": "storage_technology_type",
                    "comment": "Storage Technology Complementary to EIA 923. Options are listed [here](@ref storagetech_list)",
                    "null_value": "StorageTech.OTHER_CHEM",
                    "data_type": "StorageTech"
                },
                {
                    "name": "storage_capacity",
                    "comment": "Maximum storage capacity (can be in units of, e.g., MWh for batteries or liters for hydrogen)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "storage_level_limits",
                    "null_value": "(min=0.0, max=0.0)",
                    "comment": "Minimum and maximum allowable storage levels [0, 1], which can be used to model derates or other restrictions, such as state-of-charge restrictions on battery cycling",
                    "data_type": "MinMax",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "initial_storage_capacity_level",
                    "null_value": "0.0",
                    "comment": "Initial storage capacity level as a ratio [0, 1.0] of `storage_capacity`",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "rating",
                    "comment": "Maximum output power rating of the unit (MVA)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "active_power",
                    "comment": "Initial active power set point of the unit in MW. For power flow, this is the steady state operating point of the system. For production cost modeling, this may or may not be used as the initial starting point for the solver, depending on the solver used",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "input_active_power_limits",
                    "comment": "Minimum and maximum limits on the input active power (i.e., charging)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "output_active_power_limits",
                    "comment": "Minimum and maximum limits on the output active power (i.e., discharging)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "efficiency",
                    "comment": "Average efficiency [0, 1] `in` (charging/filling) and `out` (discharging/consuming) of the storage system",
                    "null_value": "(in=0.0, out=0.0)",
                    "data_type": "NamedTuple{(:in, :out), Tuple{Float64, Float64}}",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial reactive power set point of the unit (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": "reactive_power_limits",
                    "validation_action": "warn",
                    "needs_conversion": true
                },
                {
                    "name": "reactive_power_limits",
                    "comment": "Minimum and maximum reactive power limits. Set to `Nothing` if not applicable",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "Union{Nothing, MinMax}",
                    "needs_conversion": true
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "operation_cost",
                    "comment": "[`OperationalCost`](@ref) of storage",
                    "null_value": "StorageCost(nothing)",
                    "data_type": "StorageCost",
                    "default": "StorageCost(nothing)"
                },
                {
                    "name": "conversion_factor",
                    "comment": "Conversion factor of `storage_capacity` to MWh, if different than 1.0. For example, X MWh/liter hydrogen",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "1.0"
                },
                {
                    "name": "storage_target",
                    "comment": "Storage target at the end of simulation as ratio of storage capacity",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "default": "0.0"
                },
                {
                    "name": "cycle_limits",
                    "comment": "Storage Maximum number of cycles per year",
                    "null_value": "0",
                    "data_type": "Int",
                    "default": "1e4"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Storage"
        },
        {
            "struct_name": "ConstantReserve",
            "docstring": "A reserve product with a constant procurement requirement, such as 3% of the system base power at all times.\n\nThis reserve product includes online generators that can respond right away after an unexpected contingency, such as a transmission line or generator outage. When defining the reserve, the `ReserveDirection` must be specified to define this as a [`ReserveUp`](@ref), [`ReserveDown`](@ref), or [`ReserveSymmetric`](@ref)",
            "parametric": "ReserveDirection",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "time_frame",
                    "comment": "the saturation time_frame in minutes to provide reserve contribution",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "requirement",
                    "comment": "the value of required reserves in p.u. ([`SYSTEM_BASE`](@ref per_unit))",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "sustained_time",
                    "comment": "the time in seconds reserve contribution must sustained at a specified level",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "default": "3600.0",
                    "validation_action": "error"
                },
                {
                    "name": "max_output_fraction",
                    "comment": "the maximum fraction of each device's output that can be assigned to the service",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "1.0",
                    "validation_action": "error"
                },
                {
                    "name": "max_participation_factor",
                    "comment": "the maximum portion [0, 1.0] of the reserve that can be contributed per device",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "1.0",
                    "validation_action": "error"
                },
                {
                    "name": "deployed_fraction",
                    "comment": "Fraction of service procurement that is assumed to be actually deployed. Most commonly, this is assumed to be either 0.0 or 1.0",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "0.0",
                    "validation_action": "error"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Reserve{T}"
        },
        {
            "struct_name": "ConstantReserveNonSpinning",
            "docstring": "A non-spinning reserve product with a constant procurement requirement, such as 3% of the system base power at all times.\n\nThis reserve product includes back-up generators that might not be currently synchronized with the power system, but can come online quickly after an unexpected contingency, such as a transmission line or generator outage. This is only an upwards reserve. For faster-responding upwards or downwards reserves from components already synchronized with the system, see [`ConstantReserve`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "time_frame",
                    "comment": "the saturation time frame in minutes that a participating device must provide its reserve contribution",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "requirement",
                    "comment": "the value of required reserves in p.u. ([`SYSTEM_BASE`](@ref per_unit))",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "sustained_time",
                    "comment": "the time in seconds reserve contribution must sustained at a specified level",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "default": "3600.0",
                    "validation_action": "error"
                },
                {
                    "name": "max_output_fraction",
                    "comment": "the maximum fraction of each device's output that can be assigned to the service",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "1.0",
                    "validation_action": "error"
                },
                {
                    "name": "max_participation_factor",
                    "comment": "the maximum portion [0, 1.0] of the reserve that can be contributed per device",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "1.0",
                    "validation_action": "error"
                },
                {
                    "name": "deployed_fraction",
                    "comment": "Fraction of service procurement that is assumed to be actually deployed. Most commonly, this is assumed to be either 0.0 or 1.0",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "0.0",
                    "validation_action": "error"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ReserveNonSpinning"
        },
        {
            "struct_name": "ConstantReserveGroup",
            "docstring": "A reserve product met by a group of individual reserves.\n\nThe group reserve requirement is added in addition to any individual reserve requirements, and devices that contribute to individual reserves within the group can also contribute to the overarching group reserve requirement. Example: A group of spinning and non-spinning reserves, where online generators providing spinning reserves can also contribute to the non-spinning reserve requirement.\n\nThis model has a constant procurement requirement, such as 3% of the system base power at all times. When defining the reserve, the `ReserveDirection` must be specified to define this as a [`ReserveUp`](@ref), [`ReserveDown`](@ref), or [`ReserveSymmetric`](@ref)",
            "parametric": "ReserveDirection",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "requirement",
                    "comment": "the value of required reserves in p.u. ([`SYSTEM_BASE`](@ref per_unit))",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error",
                    "needs_conversion": true
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "contributing_services",
                    "comment": "Services that contribute to this group requirement. Services must be added for this constraint to have an effect when conducting simulations in [`PowerSimulations.jl`](https://nrel-sienna.github.io/PowerSimulations.jl/latest/)",
                    "data_type": "Vector{Service}",
                    "null_value": "Vector{Service}()",
                    "default": "Vector{Service}()",
                    "exclude_setter": true
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Service"
        },
        {
            "struct_name": "ReserveDemandCurve",
            "docstring": "A reserve product with an [Operating Reserve Demand Curve (ORDC)](https://hepg.hks.harvard.edu/files/hepg/files/ordcupdate-final.pdf) for operational simulations.\n\nThe ORDC is modeled as a discretized set of `(Reserve capacity (MW), Price (\\$/MWh))` steps, which can vary with time. Use [`set_variable_cost!`](@ref) to define the ORDCs.\n\nWhen defining the reserve, the `ReserveDirection` must be specified to define this as a [`ReserveUp`](@ref), [`ReserveDown`](@ref), or [`ReserveSymmetric`](@ref)",
            "parametric": "ReserveDirection",
            "fields": [
                {
                    "name": "variable",
                    "comment": "Create this object with `variable` = `nothing`, then add assign a cost curve or time-series of `variable_cost` using the [`set_variable_cost!`](@ref) function, which will automatically update this parameter",
                    "null_value": "nothing",
                    "data_type": "Union{Nothing, TimeSeriesKey, CostCurve{PiecewiseIncrementalCurve}}"
                },
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "time_frame",
                    "comment": "the saturation time_frame in minutes to provide reserve contribution",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "sustained_time",
                    "comment": "the time in seconds that the reserve contribution must sustained at a specified level",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "default": "3600.0",
                    "validation_action": "error"
                },
                {
                    "name": "max_participation_factor",
                    "comment": "the maximum portion [0, 1.0] of the reserve that can be contributed per device",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "1.0",
                    "validation_action": "error"
                },
                {
                    "name": "deployed_fraction",
                    "comment": "Fraction of service procurement that is assumed to be actually deployed. Most commonly, this is assumed to be either 0.0 or 1.0",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "0.0",
                    "validation_action": "error"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Reserve{T}"
        },
        {
            "struct_name": "VariableReserve",
            "docstring": "A reserve product with a time-varying procurement requirement, such as a higher requirement during hours with an expected high load or high ramp.\n\nThis reserve product includes online generators that can respond right away after an unexpected contingency, such as a transmission line or generator outage. When defining the reserve, the `ReserveDirection` must be specified to define this as a [`ReserveUp`](@ref), [`ReserveDown`](@ref), or [`ReserveSymmetric`](@ref). To model the time varying requirement, a [\"`requirement`\" time series should be added](@ref ts_data) to this reserve",
            "parametric": "ReserveDirection",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "time_frame",
                    "comment": "the saturation time_frame in minutes to provide reserve contribution",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "requirement",
                    "comment": "the required quantity of the product should be scaled by a TimeSeriesData",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "sustained_time",
                    "comment": "the time in seconds reserve contribution must sustained at a specified level",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "default": "3600.0",
                    "validation_action": "error"
                },
                {
                    "name": "max_output_fraction",
                    "comment": "the maximum fraction of each device's output that can be assigned to the service",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "1.0",
                    "validation_action": "error"
                },
                {
                    "name": "max_participation_factor",
                    "comment": "the maximum portion [0, 1.0] of the reserve that can be contributed per device",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "1.0",
                    "validation_action": "error"
                },
                {
                    "name": "deployed_fraction",
                    "comment": "Fraction of service procurement that is assumed to be actually deployed. Most commonly, this is assumed to be either 0.0 or 1.0",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "0.0",
                    "validation_action": "error"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Reserve{T}"
        },
        {
            "struct_name": "VariableReserveNonSpinning",
            "docstring": "A non-spinning reserve product with a time-varying procurement requirement, such as a higher requirement during hours with an expected high load or high ramp.\n\nThis reserve product includes back-up generators that might not be currently synchronized with the power system, but can come online quickly after an unexpected contingency, such as a transmission line or generator outage. To model the time varying requirement, a [\"`requirement`\" time series should be added](@ref ts_data) to this reserve.\n\nThis is only an upwards reserve. For faster-responding upwards or downwards reserves from components already synchronized with the system, see [`VariableReserve`](@ref)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "time_frame",
                    "comment": "the saturation time_frame in minutes to provide reserve contribution",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "requirement",
                    "comment": "the required quantity of the product should be scaled by a TimeSeriesData",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "needs_conversion": true
                },
                {
                    "name": "sustained_time",
                    "comment": "the time in seconds reserve contribution must sustained at a specified level",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "default": "14400.0",
                    "validation_action": "error"
                },
                {
                    "name": "max_output_fraction",
                    "comment": "the maximum fraction of each device's output that can be assigned to the service",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "1.0",
                    "validation_action": "error"
                },
                {
                    "name": "max_participation_factor",
                    "comment": "the maximum portion [0, 1.0] of the reserve that can be contributed per device",
                    "null_value": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "1.0",
                    "validation_action": "error"
                },
                {
                    "name": "deployed_fraction",
                    "comment": "Fraction of service procurement that is assumed to be actually deployed. Most commonly, this is assumed to be either 0.0 or 1.0",
                    "null_value": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "default": "0.0",
                    "validation_action": "error"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "ReserveNonSpinning"
        },
        {
            "struct_name": "AGC",
            "docstring": "Automatic generation control (AGC) for the system or a certain `Area` within the system.\n\nThis model uses a proportional–integral–derivative (PID) control to simulate a \"smooth\" response of the AGC to the area control error (ACE). Refer to [\"AGC Simulation Model for Large Renewable Energy Penetration Studies.\"](https://doi.org/10.1109/NAPS50074.2021.9449687)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bias",
                    "comment": "Area frequency bias in MW/Hz",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "K_p",
                    "comment": "PID Proportional Constant",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "K_i",
                    "comment": "PID Integral Constant",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "K_d",
                    "comment": "PID Derivative Constant",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "delta_t",
                    "comment": "PID Discretization period [Seconds]",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "area",
                    "comment": "the area controlled by the AGC",
                    "null_value": "Area(nothing)",
                    "data_type": "Union{Nothing, Area}",
                    "default": "nothing"
                },
                {
                    "name": "initial_ace",
                    "comment": "Initial condition for ACE",
                    "default": "0.0",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Service"
        },
        {
            "struct_name": "AVRFixed",
            "docstring": "Parameters of a AVR that returns a fixed voltage to the rotor winding",
            "fields": [
                {
                    "name": "Vf",
                    "comment": "Fixed voltage field applied to the rotor winding in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) Fixed AVR has no [states](@ref S)",
                    "internal_default": "Vector{Symbol}()",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) Fixed AVR has no [states](@ref S)",
                    "null_value": 0,
                    "internal_default": 0,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) Fixed AVR has no [states](@ref S)",
                    "internal_default": "Vector{StateTypes}()",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "AVRSimple",
            "docstring": "Parameters of a simple proportional AVR in the derivative of EMF\ni.e. an integrator controller on EMF",
            "fields": [
                {
                    "name": "Kv",
                    "comment": "Proportional Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVf: field voltage",
                    "internal_default": "[:Vf]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) Fixed AVR has 1 [state](@ref S)",
                    "internal_default": 1,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) Simple AVR has 1 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "SEXS",
            "docstring": "Parameters of Simplified Excitation System Model - SEXS in PSSE",
            "fields": [
                {
                    "name": "Ta_Tb",
                    "comment": "Ratio of lead and lag time constants",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tb",
                    "comment": "Lag time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    }
                },
                {
                    "name": "K",
                    "comment": "Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Te",
                    "comment": "Field circuit time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_lim",
                    "comment": "Field voltage limits",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\tVf: Voltage field,\tVr: Lead-lag state",
                    "internal_default": "[:Vf, :Vr]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SEXS has 2 states",
                    "internal_default": 2,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) SEXS has 2 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "ESDC1A",
            "docstring": "Self-excited shunt fields with the voltage regulator operating in a mode commonly termed buck-boost. \nParameters of IEEE Std 421.5 Type DC1A Excitacion System. This model corresponds to ESDC1A in PSSE and PSLF",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Voltage Measurement Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Amplifier Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 10,
                        "max": 500
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Amplifier Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Regulator input Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tc",
                    "comment": "Regulator input Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Voltage regulator limits (regulator output) (Vi_min, Vi_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter constant related to self-excited field",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Te",
                    "comment": "Exciter time constant, integration rate associated with exciter control",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kf",
                    "comment": "Excitation control system stabilizer gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 0.3
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Tf",
                    "comment": "Excitation control system stabilizer time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "switch",
                    "comment": "Switch",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(V) = B(V - A)^2/V",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVt: Terminal Voltage,\n\tVr1: input lead lag,\n\tVr2: Regulator Output,\n\tVf: Exciter Output, \n\tVr3: Rate feedback integrator",
                    "internal_default": "[:Vt, :Vr1, :Vr2, :Vf, :Vr3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The ESDC1A has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) ESDC1A has 5 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "ESDC2A",
            "docstring": "Is used to represent field-controlled dc commutator exciters with continuously acting voltage regulators having power supplies derived from the generator or auxiliaries bus.\nParameters of IEEE Std 421.5 Type DC2A Excitacion System. This model corresponds to ESDC2A in PSSE and PSLF",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Voltage Measurement Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Amplifier Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 10,
                        "max": 500
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Amplifier Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Regulator input Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tc",
                    "comment": "Regulator input Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Voltage regulator limits (regulator output) (Vi_min, Vi_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter constant related to self-excited field",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": -1,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Te",
                    "comment": "Exciter time constant, integration rate associated with exciter control",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 2
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kf",
                    "comment": "Excitation control system stabilizer gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf",
                    "comment": "Excitation control system stabilizer time constant. Appropiate Data: 5.0 <= Tf/Kf <= 15.0",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 1.5
                    },
                    "validation_action": "error"
                },
                {
                    "name": "switch",
                    "comment": "Switch",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(V) = B(V - A)^2/V",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVt: Terminal Voltage,\n\tVr1: input lead lag,\n\tVr2: Regulator Output,\n\tVf: Exciter Output, \n\tVr3: Rate feedback integrator",
                    "internal_default": "[:Vt, :Vr1, :Vr2, :Vf, :Vr3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The ESDC2A has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) ESDC2A has 5 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "IEEET1",
            "docstring": "1968 IEEE type 1 excitation system model",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Voltage Measurement Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Amplifier Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 10,
                        "max": 500
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Amplifier Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Voltage regulator limits (regulator output) (Vi_min, Vi_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter constant related to self-excited field",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": -1,
                        "max": 1
                    }
                },
                {
                    "name": "Te",
                    "comment": "Exciter time constant, integration rate associated with exciter control",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kf",
                    "comment": "Excitation control system stabilizer gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf",
                    "comment": "Excitation control system stabilizer time constant. Appropiate Data: 5 <= Tf/Kf <= 15",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "switch",
                    "comment": "Switch",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(V) = B(V - A)^2/V",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVt: Terminal Voltage,\n\tVr: Regulator Output,\n\tVf: Exciter Output, \n\tVr3: Rate feedback integrator",
                    "internal_default": "[:Vt, :Vr1, :Vf, :Vr2]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The IEEET1 has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) IEEET1 I has 4 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "AVRTypeI",
            "docstring": "Parameters of an Automatic Voltage Regulator Type I - Resembles IEEE Type DC1",
            "fields": [
                {
                    "name": "Ka",
                    "comment": "Amplifier Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Ke",
                    "comment": "Field circuit integral deviation",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Kf",
                    "comment": "Stabilizer Gain in s * pu/pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Ta",
                    "comment": "Amplifier Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Te",
                    "comment": "Field Circuit Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tf",
                    "comment": "Stabilizer Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tr",
                    "comment": "Voltage Measurement Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Va_lim",
                    "comment": "Limits for pi controler `(Va_min, Va_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Ae",
                    "comment": "1st ceiling coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Be",
                    "comment": "2nd ceiling coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVf: Voltage field,\n\tVr1: Amplifier State,\n\tVr2: Stabilizing Feedback State,\n\tVm: Measured voltage",
                    "internal_default": "[:Vf, :Vr1, :Vr2, :Vm]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The AVR Type I has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) AVR Type I has 4 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "AVRTypeII",
            "docstring": "Parameters of an Automatic Voltage Regulator Type II -  Typical static exciter model",
            "fields": [
                {
                    "name": "K0",
                    "comment": "Regulator Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T1",
                    "comment": "First Pole in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T2",
                    "comment": "First zero in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T3",
                    "comment": "First Pole in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T4",
                    "comment": "First zero in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Te",
                    "comment": "Field Circuit Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tr",
                    "comment": "Voltage Measurement Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Va_lim",
                    "comment": "Limits for pi controler `(Va_min, Va_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Ae",
                    "comment": "1st ceiling coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Be",
                    "comment": "2nd ceiling coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVf: Voltage field,\n\tVr1: First Lead-Lag state,\n\tVr2: Second lead-lag state,\n\tVm: Measured voltage",
                    "internal_default": "[:Vf, :Vr1, :Vr2, :Vm]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) AVR Type II has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) AVR Type II has 4 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "SCRX",
            "docstring": "This exciter is based on an IEEE type SCRX solid state exciter.  The output field voltage is varied by a control system to maintain the system voltage at Vref.  Please note that this exciter model has no initialization capabilities - this means that it will respond to whatever inputs it receives regardless of the state of the machine model",
            "fields": [
                {
                    "name": "Ta_Tb",
                    "comment": "Lead input constant ratio",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0.05,
                        "max": 0.3
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Tb",
                    "comment": "Lag input constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 5,
                        "max": 20
                    },
                    "validation_action": "error"
                },
                {
                    "name": "K",
                    "comment": "Regulator Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 20,
                        "max": 100
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Te",
                    "comment": "Regulator Time Constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Efd_lim",
                    "comment": "Field Voltage regulator limits (regulator output) (Efd_min, Efd_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "switch",
                    "comment": "Switch",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "rc_rfd",
                    "comment": "Field current capability. Set = 0 for negative current capability. Typical value 10",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVr1: First integrator,\n\tVr2: Second integrator",
                    "internal_default": "[:Vr1, :Vr2]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SCRX has 2 states",
                    "internal_default": 2,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) SCRX has 2 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "ESAC1A",
            "docstring": "This excitation systems consists of an alternator main exciter feeding its output via non-controlled rectifiers.\nThe exciter does not employ self-excitation, and the voltage regulator power is taken from a source that is not affected by external transients.\nParameters of IEEE Std 421.5 Type AC1A Excitacion System. This model corresponds to ESAC1A in PSSE and PSLF",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Regulator denominator (lag) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tc",
                    "comment": "Regulator numerator (lead) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Regulator output gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1000
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Regulator output time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    }
                },
                {
                    "name": "Va_lim",
                    "comment": "Limits for regulator output `(Va_min, Va_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Te",
                    "comment": "Exciter field time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 2
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kf",
                    "comment": "Rate feedback excitation system stabilizer gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf",
                    "comment": "Rate feedback time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 1.5
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kc",
                    "comment": "Rectifier loading factor proportional to commutating reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kd",
                    "comment": "Demagnetizing factor, function of exciter alternator reactances",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter field proportional constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Limits for exciter field voltage: `(Vr_min, Vr_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(x) = B(x - A)^2/x",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tVr1: Lead-lag state,\n\tVr2: Regulator output state,\n\tVe: Integrator output state,\n\tVr3: Feedback output state",
                    "internal_default": "[:Vm, :Vr1, :Vr2, :Ve, :Vr3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ESAC1A has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) ESAC1A has 5 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "EXAC1A",
            "docstring": "Modified ESAC1A. This excitation systems consists of an alternator main exciter feeding its output via non-controlled rectifiers.\nThe exciter does not employ self-excitation, and the voltage regulator power is taken from a source that is not affected by external transients.\nParameters of IEEE Std 421.5 Type AC1A Excitacion System. EXAC1A in PSSE and PSLF",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Regulator denominator (lag) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tc",
                    "comment": "Regulator numerator (lead) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Regulator output gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1000
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Regulator output time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    }
                },
                {
                    "name": "Va_lim",
                    "comment": "Limits for regulator output `(Va_min, Va_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Te",
                    "comment": "Exciter field time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 2
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kf",
                    "comment": "Rate feedback excitation system stabilizer gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf",
                    "comment": "Rate feedback time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 1.5
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kc",
                    "comment": "Rectifier loading factor proportional to commutating reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kd",
                    "comment": "Demagnetizing factor, function of exciter alternator reactances",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter field proportional constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Limits for exciter field voltage: `(Vr_min, Vr_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(x) = B(x - A)^2/x",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tVr1: Lead-lag state,\n\tVr2: Regulator output state,\n\tVe: Integrator output state,\n\tVr3: Feedback output state",
                    "internal_default": "[:Vm, :Vr1, :Vr2, :Ve, :Vr3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) EXAC1A has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) EXAC1A has 5 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "EXAC1",
            "docstring": "Modified ESAC1A. This excitation systems consists of an alternator main exciter feeding its output via non-controlled rectifiers.\nThe exciter does not employ self-excitation, and the voltage regulator power is taken from a source that is not affected by external transients.\nParameters of IEEE Std 421.5 Type AC1A.  EXAC1 in PSSE and PSLF",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Regulator denominator (lag) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tc",
                    "comment": "Regulator numerator (lead) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Regulator output gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1000
                    }
                },
                {
                    "name": "Ta",
                    "comment": "Regulator output time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Limits for regulator output `(Vr_min, Vr_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Te",
                    "comment": "Exciter field time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 2
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kf",
                    "comment": "Rate feedback excitation system stabilizer gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf",
                    "comment": "Rate feedback time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 1.5
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kc",
                    "comment": "Rectifier loading factor proportional to commutating reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Kd",
                    "comment": "Demagnetizing factor, function of exciter alternator reactances",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter field proportional constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(V) = B(V - A)^2/V",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tVr1: Lead-lag state,\n\tVr2: Regulator output state,\n\tVe: Integrator output state,\n\tVr3: Feedback output state",
                    "internal_default": "[:Vm, :Vr1, :Vr2, :Ve, :Vr3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) EXAC1 has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) EXAC1 has 5 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "EXAC2",
            "docstring": "Modified AC2. This excitation systems consists of an alternator main exciter feeding its output via non-controlled rectifiers.\nThe exciter does not employ self-excitation, and the voltage regulator power is taken from a source that is not affected by external transients.\nParameters of IEEE Std 421.5 Type AC2A Excitacion System. The alternator main exciter is used, feeding its output via non-controlled rectifiers. The Type AC2C model is similar to that of Type AC1C except for the inclusion of exciter time constant compensation and exciter field current limiting elements. EXAC2 in PSSE and PSLF",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Regulator denominator (lag) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tc",
                    "comment": "Regulator numerator (lead) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Regulator output gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1000
                    }
                },
                {
                    "name": "Ta",
                    "comment": "Regulator output time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Va_lim",
                    "comment": "Limits for regulator output `(Va_min, Va_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Kb",
                    "comment": "Second Stage regulator gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 500
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Limits for exciter field voltage `(Vr_min, Vr_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Te",
                    "comment": "Exciter field time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 2
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kl",
                    "comment": "Exciter field current limiter gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1.1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kh",
                    "comment": "Exciter field current regulator feedback gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1.1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kf",
                    "comment": "Rate feedback excitation system stabilizer gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf",
                    "comment": "Rate feedback time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Kc",
                    "comment": "Rectifier loading factor proportional to commutating reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kd",
                    "comment": "Demagnetizing factor, function of exciter alternator reactances",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter field proportional constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "V_lr",
                    "comment": "Maximum exciter field current",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(V) = B(V - A)^2/V",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tVr1: Lead-lag state,\n\tVr2: Regulator output state,\n\tVe: Integrator output state,\n\tVr3: Feedback output state",
                    "internal_default": "[:Vm, :Vr1, :Vr2, :Ve, :Vr3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) EXAC2 has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) EXAC2 has 5 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "ESAC6A",
            "docstring": "Modified AC6A. Used to represent field-controlled alternator-rectifier excitation systems with system-supplied electronic voltage regulators. \nParameters of IEEE Std 421.5 Type AC6A Excitacion System. ESAC6A in PSSE and PSLF",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Regulator output gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1000
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Regulator output lag time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tk",
                    "comment": "Voltage Regulator lead time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Regulator denominator (lag) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tc",
                    "comment": "Regulator numerator (lead) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Va_lim",
                    "comment": "Limits for regulator output `(Va_min, Va_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Limits for exciter field voltage `(Vr_min, Vr_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Te",
                    "comment": "Exciter field time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 2
                    },
                    "validation_action": "error"
                },
                {
                    "name": "VFE_lim",
                    "comment": "Exciter field current limiter reference",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": -5,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kh",
                    "comment": "Exciter field current regulator feedback gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "VH_max",
                    "comment": "Exciter field current limiter maximum output",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Th",
                    "comment": "Exciter field current limiter denominator (lag) time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Tj",
                    "comment": "Exciter field current limiter numerator (lead) time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kc",
                    "comment": "Rectifier loading factor proportional to commutating reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Kd",
                    "comment": "Demagnetizing factor, function of exciter alternator reactances",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter field proportional constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(V) = B(V - A)^2/V",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tVr1: Lead-lag state,\n\tVr2: Regulator output state,\n\tVe: Integrator output state,\n\tVr3: Feedback output state",
                    "internal_default": "[:Vm, :Vr1, :Vr2, :Ve, :Vr3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ESAC6A has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) ESAC6A has 5 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "ESAC8B",
            "docstring": "Excitation System AC8B. Used to represent the Basler Digital Excitation Control System (DECS) with PID controller in PSSE.",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kp",
                    "comment": "Regulator proportional PID gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ki",
                    "comment": "Regulator integral PID gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kd",
                    "comment": "Regulator derivative PID gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Td",
                    "comment": "Regulator derivative PID time constant.",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Regulator output gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1000
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Regulator output lag time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Limits for exciter field voltage `(Vr_min, Vr_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Te",
                    "comment": "Exciter field time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 2
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter field proportional constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(V) = B(V - A)^2/V",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tx_i: Internal PI-block state,\n\tx_d: Internal Derivative-block state,\n\tVr: Voltage regulator state,\n\tEfd: Exciter output state",
                    "internal_default": "[:Vm, :x_i, :x_d, :Vr, :Efd]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ESAC8B has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) ESAC8B has 5 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Differential, StateTypes.Differential, StateTypes.Hybrid, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "ESST1A",
            "docstring": "This excitation system supplies power through a transformer from the generator terminals and its regulated by a controlled rectifier (via thyristors).\nParameters of IEEE Std 421.5 Type ST1A Excitacion System. ESST1A in PSSE and PSLF",
            "fields": [
                {
                    "name": "UEL_flags",
                    "comment": "Code input for Underexcitization limiter (UEL) entry. Not supported",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "PSS_flags",
                    "comment": "Code input for Power System Stabilizer (PSS) or (VOS) entry",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 2
                    }
                },
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vi_lim",
                    "comment": "Voltage error limits (regulator input) (Vi_min, Vi_max)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Tc",
                    "comment": "First regulator denominator (lead) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "First regulator denominator (lag) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    }
                },
                {
                    "name": "Tc1",
                    "comment": "Second regulator denominator (lead) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb1",
                    "comment": "Second regulator denominator (lead) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Voltage regulator gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 50,
                        "max": 1000
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Voltage regulator time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Va_lim",
                    "comment": "Limits for regulator output `(Va_min, Va_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Limits for exciter output `(Vr_min, Vr_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Kc",
                    "comment": "Rectifier loading factor proportional to commutating reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kf",
                    "comment": "Rate feedback gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf",
                    "comment": "Rate feedback time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 1.5
                    },
                    "validation_action": "error"
                },
                {
                    "name": "K_lr",
                    "comment": "Exciter output current limiter gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "I_lr",
                    "comment": "Exciter output current limit reference",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tVr1: First Lead-lag state,\n\tVr2: Second lead-lag state,\n\tVa: Regulator output state,\n\tVr3: Feedback output state",
                    "internal_default": "[:Vm, :Vr1, :Vr2, :Va, :Vr3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ST1A has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) ST1A has 5 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "EXPIC1",
            "docstring": "Generic Proportional/Integral Excitation System",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Voltage regulator gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 1,
                        "max": 500
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Voltage regulator time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Va_lim",
                    "comment": "Limits for pi controler `(Vr_min, Vr_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Ta_2",
                    "comment": "Voltage regulator time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Ta_3",
                    "comment": "Voltage regulator time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta_4",
                    "comment": "Voltage regulator time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Voltage regulator limits (regulator output) (Vi_min, Vi_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Kf",
                    "comment": "Rate feedback gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf_1",
                    "comment": "Rate Feedback time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 15
                    },
                    "validation_actions": "error"
                },
                {
                    "name": "Tf_2",
                    "comment": "Rate Feedback time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Efd_lim",
                    "comment": "Field Voltage regulator limits (regulator output) (Efd_min, Efd_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Ke",
                    "comment": "Exciter constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Te",
                    "comment": "Exciter time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "E_sat",
                    "comment": "Exciter output voltage for saturation factor: (E1, E2)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Se",
                    "comment": "Exciter saturation factor at exciter output voltage: (Se(E1), Se(E2))",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Kp",
                    "comment": "Potential source gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ki",
                    "comment": "current source gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1.1
                    }
                },
                {
                    "name": "Kc",
                    "comment": "Exciter regulation factor",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "saturation_coeffs",
                    "comment": "(**Do not modify.**) Coefficients (A,B) of the function: Se(V) = B(V - A)^2/V",
                    "data_type": "Tuple{Float64, Float64}",
                    "null_value": "(0.0, 0.0)",
                    "default": "PowerSystems.get_avr_saturation(E_sat, Se)"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tVr1: First Lead-lag state,\n\tVr2: Second regulator lead-lag state,\n\tVr2: Third regulator lead-lag state \n\tVf: Exciter output \n\tVr3: First feedback integrator,\n\tVr4: second feedback integrator",
                    "internal_default": "[:Vm, :Vr1, :Vr2, :Vf, :Vr3, :Vr4]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) EXPIC1 has 6 states",
                    "internal_default": 6,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) EXPIC has 6 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "ESST4B",
            "docstring": "In these excitation systems, voltage (and also current in compounded systems) is transformed to an appropriate level. Rectifiers, either controlled or non-controlled, provide the necessary direct current for the generator field.\nParameters of IEEE Std 421.5 Type ST4B Excitacion System. ESST4B in PSSE and PSLF",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_pr",
                    "comment": "Regulator propotional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 75
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_ir",
                    "comment": "Regulator integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 75
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Voltage regulator limits (Vi_min, Vi_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Ta",
                    "comment": "Voltage regulator time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_pm",
                    "comment": "Voltage regulator proportional gain output",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1.2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_im",
                    "comment": "Voltage regulator integral gain output",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 18
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vm_lim",
                    "comment": "Limits for inner loop output `(Vm_min, Vm_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Kg",
                    "comment": "Feedback gain constant of the inner loop field regulator",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1.1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kp",
                    "comment": "Potential circuit (voltage) gain coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ki",
                    "comment": "Compound circuit (current) gain coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1.1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "VB_max",
                    "comment": "Maximum available exciter voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 1,
                        "max": 20
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kc",
                    "comment": "Rectifier loading factor proportional to commutating reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Xl",
                    "comment": "Reactance associated with potential source",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "θp",
                    "comment": "Potential circuit phase angle (degrees)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": -90,
                        "max": 90
                    },
                    "validation_action": "error"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "θp_rad",
                    "comment": "(**Do not modify.**) Potential circuit phase angle (radians)",
                    "null_value": 0,
                    "default": "θp*π*inv(180)",
                    "data_type": "Float64"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tVt: Sensed Terminal Voltage,\n\tVr1: Regulator Integrator,\n\tVr2: Regulator Output,\n\tVm: Output integrator",
                    "internal_default": "[:Vt, :Vr1, :Vr2, :Vm]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ST4B has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) ST4B has 4 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "ST6B",
            "docstring": "In these excitation systems, voltage (and also current in compounded systems) is transformed to an appropriate level. Rectifiers, either controlled or non-controlled, provide the necessary direct current for the generator field.\nParameters of IEEE Std 421.5 Type ST6B Excitacion System. ST6B in PSSE and PSLF",
            "fields": [
                {
                    "name": "OEL_Flag",
                    "comment": "OEL Flag for ST6B: 1: before HV gate, 2: after HV gate",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    }
                },
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_pa",
                    "comment": "Regulator proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_ia",
                    "comment": "Regulator integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_da",
                    "comment": "Regulator derivative gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T_da",
                    "comment": "Voltage regulator derivative channel time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Va_lim",
                    "comment": "Regulator output limits (Vi_min, Vi_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "K_ff",
                    "comment": "Pre-control gain of the inner loop field regulator",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_m",
                    "comment": "Forward gain of the inner loop field regulator",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_ci",
                    "comment": "Exciter output current limit adjustment gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_lr",
                    "comment": "Exciter output current limiter gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "I_lr",
                    "comment": "Exciter current limiter reference",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Voltage regulator limits (Vi_min, Vi_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Kg",
                    "comment": "Feedback gain constant of the inner loop field regulator",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tg",
                    "comment": "Feedback time constant of the inner loop field voltage regulator in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tx_i: Regulator Integrator,\n\tx_d: Regulator Derivative,\n\tVg: Regulator Feedback",
                    "internal_default": "[:Vm, :x_i, :x_d, :Vg]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ST6B has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) ST6B has 4 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "ST8C",
            "docstring": "In these excitation systems, voltage (and also current in compounded systems) is transformed to an appropriate level. Rectifiers, either controlled or non-controlled, provide the necessary direct current for the generator field.\nParameters of IEEE Std 421.5 Type ST8C Excitacion System. ST8C in PSSE and PSLF",
            "fields": [
                {
                    "name": "OEL_Flag",
                    "comment": "OEL Flag for ST8C: <2: Summation at Voltage Error, 2: OEL takeover at gate",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    }
                },
                {
                    "name": "UEL_Flag",
                    "comment": "UEL Flag for ST8C: <2: Summation at Voltage Error, 2: UEL takeover at gate",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    }
                },
                {
                    "name": "SCL_Flag",
                    "comment": "SCL Flag for ST8C: <2: Summation at Voltage Error, 2: SCL Takeover at UEL and OEL gates",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    }
                },
                {
                    "name": "SW1_Flag",
                    "comment": "SW1 Flag for Power Source Selector for ST8C: <2: Source from generator terminal voltage, 2: Independent power source",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    }
                },
                {
                    "name": "Tr",
                    "comment": "Regulator input filter time constant in seconds",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_pr",
                    "comment": "Regulator proportional gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_ir",
                    "comment": "Regulator integral gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vpi_lim",
                    "comment": "Regulator input limits (Vpi_min, Vpi_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "K_pa",
                    "comment": "Field current regulator proportional gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_ia",
                    "comment": "Field current regulator integral gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Va_lim",
                    "comment": "Field current regulator output limits (Va_min, Va_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "K_a",
                    "comment": "Field current regulator proportional gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T_a",
                    "comment": "Controlled rectifier bridge equivalent time constant in seconds",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Voltage regulator limits (Vr_min, Vr_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "K_f",
                    "comment": "Exciter field current feedback gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T_f",
                    "comment": "Field current feedback time constant in seconds",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_c1",
                    "comment": "Rectifier loading factor proportional to commutating reactance (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_p",
                    "comment": "Potential circuit (voltage) gain coefficient (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_i1",
                    "comment": "Potential circuit (current) gain coefficient (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "X_l",
                    "comment": "Reactance associated with potential source (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "θ_p",
                    "comment": "Potential circuit phase angle (degrees)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "VB1_max",
                    "comment": "Maximum available exciter voltage (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_c2",
                    "comment": "Rectifier loading factor proportional to commutating reactance (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_i2",
                    "comment": "Potential circuit (current) gain coefficient (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "VB2_max",
                    "comment": "Maximum available exciter voltage (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Ifd_ref",
                    "comment": "Reference Field Current Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed terminal voltage,\n\tx_a1: Regulator Integrator state,\n\tx_a2: Field Current regulator state,\n\tx_a3: Controller rectifier bridge state,\n\tx_a4: Regulator Feedback state",
                    "internal_default": "[:Vm, :x_a1, :x_a2, :x_a3, :x_a4]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ST8C has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) ST8C has 5 states",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "EXST1",
            "docstring": "IEEE Type ST1 Excitation System (PTI version)",
            "fields": [
                {
                    "name": "Tr",
                    "comment": "Voltage Measurement Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vi_lim",
                    "comment": "Voltage input limits (Vi_min, Vi_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Tc",
                    "comment": "Numerator lead-lag (lead) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Denominator lead-lag (lag) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Amplifier Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Amplifier Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vr_lim",
                    "comment": "Voltage regulator limits (regulator output) (Vr_min, Vr_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Kc",
                    "comment": "Current field constant limiter multiplier",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Kf",
                    "comment": "Excitation control system stabilizer gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf",
                    "comment": "Excitation control system stabilizer time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVm: Sensed Terminal Voltage,\n\tVrll: Lead-Lag state,\n\tVr: Regulator Output, \n\tVfb: Feedback state",
                    "internal_default": "[:Vm, :Vrll, :Vr, :Vfb]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The EXST1 has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "EX4VSA",
            "docstring": "IEEE Excitation System for Voltage Security Assesment",
            "fields": [
                {
                    "name": "Iflim",
                    "comment": "OEL Field current limit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "d",
                    "comment": "OEL parameter d",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "f",
                    "comment": "OEL parameter f",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Spar",
                    "comment": "OEL parameter Spar",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K1",
                    "comment": "OEL delay time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K2",
                    "comment": "OEL parameter K2",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Oel_lim",
                    "comment": "Oel integrator limits (Oel_min, Oel_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "G",
                    "comment": "AVR Exciter Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Numerator lead-lag (lag) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Denominator lead-lag (lag) time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Te",
                    "comment": "Exciter Time Constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "E_lim",
                    "comment": "Voltage regulator limits (regulator output) (E_min, E_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tVll: Lead-lag internal state,\n\tVex: Exciter Output, \n\toel: OEL integrator state",
                    "internal_default": "[:Vll, :Vex, :oel]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The EX4VSA has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "AVR"
        },
        {
            "struct_name": "BaseMachine",
            "docstring": "Parameters of a Classic Machine: GENCLS in PSSE and PSLF",
            "fields": [
                {
                    "name": "R",
                    "comment": "Resistance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_p",
                    "comment": "Reactance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "eq_p",
                    "comment": "Fixed EMF behind the impedance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) BaseMachine has no [states](@ref S)",
                    "internal_default": "Vector{Symbol}()",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) BaseMachine has no states",
                    "internal_default": 0,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "RoundRotorMachine",
            "docstring": "Parameters of 4-[states](@ref S) round-rotor synchronous machine with quadratic/exponential saturation:\nIEEE Std 1110 §5.3.2 (Model 2.2). GENROU or GENROE model in PSSE and PSLF",
            "fields": [
                {
                    "name": "R",
                    "comment": "Armature resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_p",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Time constant of transient d-axis voltage",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_pp",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Time constant of sub-transient d-axis voltage",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_p",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Time constant of transient q-axis voltage",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_pp",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Time constant of sub-transient q-axis voltage",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in d-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in q-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_p",
                    "comment": "Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_p",
                    "comment": "Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_pp",
                    "comment": "Sub-Transient reactance after EMF in d-axis per unit. Note: Xd_pp = Xq_pp",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xl",
                    "comment": "Stator leakage reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Se",
                    "comment": "Saturation factor at 1 and 1.2 pu flux: S(1.0) = B(|ψ_pp|-A)^2",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "γ_d1",
                    "comment": "(**Do not modify.**) γ_d1 parameter",
                    "internal_default": "(Xd_pp - Xl) / (Xd_p - Xl)",
                    "data_type": "Float64"
                },
                {
                    "name": "γ_q1",
                    "comment": "(**Do not modify.**) γ_q1 parameter",
                    "internal_default": "(Xd_pp - Xl) / (Xq_p - Xl)",
                    "data_type": "Float64"
                },
                {
                    "name": "γ_d2",
                    "comment": "(**Do not modify.**) γ_d2 parameter",
                    "internal_default": "(Xd_p - Xd_pp) / (Xd_p - Xl)^2",
                    "data_type": "Float64"
                },
                {
                    "name": "γ_q2",
                    "comment": "(**Do not modify.**) γ_q2 parameter",
                    "internal_default": "(Xq_p - Xd_pp) / (Xq_p - Xl)^2",
                    "data_type": "Float64"
                },
                {
                    "name": "γ_qd",
                    "comment": "(**Do not modify.**) γ_qd parameter",
                    "internal_default": "(Xq - Xl) / (Xd - Xl)",
                    "data_type": "Float64"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\teq_p: q-axis generator voltage behind the transient reactance,\n\ted_p: d-axis generator voltage behind the transient reactance,\n\tψ_kd: flux linkage in the first equivalent damping circuit in the d-axis,\n\tψ_kq: flux linkage in the first equivalent damping circuit in the d-axis",
                    "internal_default": "[:eq_p, :ed_p, :ψ_kd, :ψ_kq]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) RoundRotorMachine has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "SalientPoleMachine",
            "docstring": "Parameters of 3-[states](@ref S) salient-pole synchronous machine with quadratic/exponential saturation:\nIEEE Std 1110 §5.3.1 (Model 2.1). GENSAL or GENSAE model in PSSE and PSLF",
            "fields": [
                {
                    "name": "R",
                    "comment": "Armature resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_p",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Time constant of transient d-axis voltage",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_pp",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Time constant of sub-transient d-axis voltage",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_pp",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Time constant of sub-transient q-axis voltage",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in d-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in q-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_p",
                    "comment": "Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_pp",
                    "comment": "Sub-Transient reactance after EMF in d-axis per unit. Note: Xd_pp = Xq_pp",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xl",
                    "comment": "Stator leakage reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Se",
                    "comment": "Saturation factor at 1 and 1.2 pu flux: Se(eq_p) = B(eq_p-A)^2",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "γ_d1",
                    "comment": "(**Do not modify.**) γ_d1 parameter",
                    "internal_default": "(Xd_pp - Xl) / (Xd_p - Xl)",
                    "data_type": "Float64"
                },
                {
                    "name": "γ_q1",
                    "comment": "(**Do not modify.**) γ_q1 parameter",
                    "internal_default": "(Xd_p - Xd_pp) / (Xd_p - Xl)",
                    "data_type": "Float64"
                },
                {
                    "name": "γ_d2",
                    "comment": "(**Do not modify.**) γ_d2 parameter",
                    "internal_default": "(Xd_p - Xd_pp) / (Xd_p - Xl)^2",
                    "data_type": "Float64"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\teq_p: q-axis generator voltage behind the transient reactance,\n\tψ_kd: flux linkage in the first equivalent damping circuit in the d-axis,\n\tψq_pp: phasonf of the subtransient flux linkage in the q-axis",
                    "internal_default": "[:eq_p, :ψ_kd, :ψq_pp]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SalientPoleMachine has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "AndersonFouadMachine",
            "docstring": "Parameters of 6-[states](@ref S) synchronous machine: Anderson-Fouad model",
            "fields": [
                {
                    "name": "R",
                    "comment": "Resistance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in d-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in q-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_p",
                    "comment": "Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_p",
                    "comment": "Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_pp",
                    "comment": "Sub-Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_pp",
                    "comment": "Sub-Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_p",
                    "comment": "Time constant of transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_p",
                    "comment": "Time constant of transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_pp",
                    "comment": "Time constant of sub-transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_pp",
                    "comment": "Time constant of sub-transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tψq: q-axis stator flux,\n\tψd: d-axis stator flux,\n\teq_p: q-axis transient voltage,\n\ted_p: d-axis transient voltage,\n\teq_pp: q-axis subtransient voltage,\n\ted_pp: d-axis subtransient voltage",
                    "internal_default": "[:ψq, :ψd, :eq_p, :ed_p, :eq_pp, :ed_pp]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The states AndersonFouadMachine has 6 states",
                    "internal_default": 6,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "FullMachine",
            "docstring": "Parameter of a full order flux stator-rotor model without zero sequence flux in the stator.\n The derivative of stator fluxes (ψd and ψq) is NOT neglected. Only one q-axis damping circuit is considered. All parameters are in machine per unit.\n Refer to Chapter 3 of [Power System Stability and Control by P. Kundur](https://www.accessengineeringlibrary.com/content/book/9781260473544) or Chapter 11 of [Power System Dynamics: Stability and Control, by J. Machowski, J. Bialek and J. Bumby](https://www.wiley.com/en-us/Power+System+Dynamics%3A+Stability+and+Control%2C+3rd+Edition-p-9781119526360), for more details.\n Note that the models are somewhat different (but equivalent) due to the different Park Transformation used in both books",
            "fields": [
                {
                    "name": "R",
                    "comment": "Resistance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_f",
                    "comment": "Field rotor winding resistance in per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_1d",
                    "comment": " Damping rotor winding resistance on d-axis in per unit. This value is denoted as RD in Machowski",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_1q",
                    "comment": "Damping rotor winding resistance on q-axis in per unit. This value is denoted as RQ in Machowski",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_d",
                    "comment": "Inductance of fictitious damping that represent the effect of the three-phase stator winding in the d-axis of the rotor, in per unit. This value is denoted as L_ad + L_l in Kundur (and Ld in Machowski)",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_q",
                    "comment": "Inductance of fictitious damping that represent the effect of the three-phase stator winding in the q-axis of the rotor, in per unit. This value is denoted as L_aq + L_l in Kundur",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_ad",
                    "comment": "Mutual inductance between stator winding and rotor field (and damping) winding inductance on d-axis, in per unit",
                    "null_value": 2,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_aq",
                    "comment": "Mutual inductance between stator winding and rotor damping winding inductance on q-axis, in per unit",
                    "null_value": 2,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_f1d",
                    "comment": "Mutual inductance between rotor field winding and rotor damping winding inductance on d-axis, in per unit",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_ff",
                    "comment": "Field rotor winding inductance, in per unit",
                    "null_value": 2,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_1d",
                    "comment": "Inductance of the d-axis rotor damping circuit, in per unit",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_1q",
                    "comment": "Inductance of the q-axis rotor damping circuit, in per unit",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "inv_d_fluxlink",
                    "data_type": "Array{Float64,2}",
                    "internal_default": "inv([[-L_d L_ad L_ad]; [-L_ad L_ff L_f1d]; [-L_ad L_f1d L_1d]])",
                    "comment": "(**Do not modify.**) Equations 3.127, 3.130, 3.131 From Kundur"
                },
                {
                    "name": "inv_q_fluxlink",
                    "data_type": "Array{Float64,2}",
                    "internal_default": "inv([[-L_q L_aq]; [-L_aq L_1q]])",
                    "comment": "(**Do not modify.**) Equations 3.128, 3.132 From Kundur"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tψd: d-axis stator flux,\n\tψq: q-axis stator flux,\n\tψf: field rotor flux,\n\tψ1d: d-axis rotor damping flux,\n\tψ1q: q-axis rotor damping flux",
                    "internal_default": "[:ψd, :ψq, :ψf, :ψ1d, :ψ1q]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) FullMachine has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "SauerPaiMachine",
            "docstring": "Parameters of synchronous machine: Sauer Pai model",
            "fields": [
                {
                    "name": "R",
                    "comment": "Resistance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in d-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in q-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_p",
                    "comment": "Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_p",
                    "comment": "Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_pp",
                    "comment": "Sub-Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_pp",
                    "comment": "Sub-Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xl",
                    "comment": "Stator Leakage Reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_p",
                    "comment": "Time constant of transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_p",
                    "comment": "Time constant of transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_pp",
                    "comment": "Time constant of sub-transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_pp",
                    "comment": "Time constant of sub-transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "γ_d1",
                    "data_type": "Float64",
                    "internal_default": "(Xd_pp-Xl)/(Xd_p-Xl)",
                    "comment": "(**Do not modify.**) Internal equation"
                },
                {
                    "name": "γ_q1",
                    "data_type": "Float64",
                    "internal_default": "(Xq_pp-Xl)/(Xq_p-Xl)",
                    "comment": "(**Do not modify.**) Internal equation"
                },
                {
                    "name": "γ_d2",
                    "data_type": "Float64",
                    "internal_default": "(Xd_p - Xd_pp) / (Xd_p - Xl)^2",
                    "comment": "(**Do not modify.**) Internal equation"
                },
                {
                    "name": "γ_q2",
                    "data_type": "Float64",
                    "internal_default": "(Xq_p - Xq_pp) / (Xq_p - Xl)^2",
                    "comment": "(**Do not modify.**) Internal equation"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tψq: q-axis stator flux,\n\tψd: d-axis stator flux,\n\teq_p: q-axis transient voltage,\n\ted_p: d-axis transient voltage\n\tψd_pp: subtransient flux linkage in the d-axis\n\tψq_pp: subtransient flux linkage in the q-axis",
                    "internal_default": "[:ψq, :ψd, :eq_p, :ed_p, :ψd_pp, :ψq_pp]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SauerPaiMachine has 6 states",
                    "internal_default": 6,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "MarconatoMachine",
            "docstring": "Parameters of 6-[states](@ref S) synchronous machine: Marconato model",
            "fields": [
                {
                    "name": "R",
                    "comment": "Resistance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in d-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in q-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_p",
                    "comment": "Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_p",
                    "comment": "Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_pp",
                    "comment": "Sub-Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_pp",
                    "comment": "Sub-Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_p",
                    "comment": "Time constant of transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_p",
                    "comment": "Time constant of transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_pp",
                    "comment": "Time constant of sub-transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_pp",
                    "comment": "Time constant of sub-transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T_AA",
                    "comment": "Time constant of d-axis additional leakage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "γd",
                    "data_type": "Float64",
                    "internal_default": "((Td0_pp*Xd_pp)/(Td0_p*Xd_p) )*(Xd-Xd_p)",
                    "comment": "(**Do not modify.**) Internal equation"
                },
                {
                    "name": "γq",
                    "data_type": "Float64",
                    "internal_default": "((Tq0_pp*Xq_pp)/(Tq0_p*Xq_p) )*(Xq-Xq_p)",
                    "comment": "(**Do not modify.**) Internal equation"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tψq: q-axis stator flux,\n\tψd: d-axis stator flux,\n\teq_p: q-axis transient voltage,\n\ted_p: d-axis transient voltage,\n\teq_pp: q-axis subtransient voltage,\n\ted_pp: d-axis subtransient voltage",
                    "internal_default": "[:ψq, :ψd, :eq_p, :ed_p, :eq_pp, :ed_pp]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) MarconatoMachine has 6 states",
                    "internal_default": 6,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "OneDOneQMachine",
            "docstring": "Parameters of 4-[states](@ref S) synchronous machine: Simplified Marconato model\n The derivative of stator fluxes (ψd and ψq) is neglected and ωψd = ψd and\n ωψq = ψq is assumed (i.e. ω=1.0). This is standard when\n transmission network dynamics is neglected",
            "fields": [
                {
                    "name": "R",
                    "comment": "Resistance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in d-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in q-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_p",
                    "comment": "Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_p",
                    "comment": "Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_p",
                    "comment": "Time constant of transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_p",
                    "comment": "Time constant of transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\teq_p: q-axis transient voltage,\n\ted_p: d-axis transient voltage",
                    "internal_default": "[:eq_p, :ed_p]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) OneDOneQMachine has 2 states",
                    "internal_default": 2,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "SimpleAFMachine",
            "docstring": "Parameters of 4-[states](@ref S) simplified Anderson-Fouad (SimpleAFMachine) model.\n The derivative of stator fluxes (ψd and ψq) is neglected and ωψd = ψd and\n ωψq = ψq is assumed (i.e. ω=1.0). This is standard when transmission network\n dynamics is neglected.\n If transmission dynamics is considered use the full order Anderson Fouad model",
            "fields": [
                {
                    "name": "R",
                    "comment": "Resistance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in d-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in q-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_p",
                    "comment": "Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_p",
                    "comment": "Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_pp",
                    "comment": "Sub-Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_pp",
                    "comment": "Sub-Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_p",
                    "comment": "Time constant of transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_p",
                    "comment": "Time constant of transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_pp",
                    "comment": "Time constant of sub-transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_pp",
                    "comment": "Time constant of sub-transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\teq_p: q-axis transient voltage,\n\ted_p: d-axis transient voltage,\n\teq_pp: q-axis subtransient voltage,\n\ted_pp: d-axis subtransient voltage",
                    "internal_default": "[:eq_p, :ed_p, :eq_pp, :ed_pp]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SimpleAFMachine has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "SimpleFullMachine",
            "docstring": "Parameter of a full order flux stator-rotor model without zero sequence flux in the stator.\n The derivative of stator fluxes (ψd and ψq) is neglected. This is standard when\n transmission network dynamics is neglected. Only one q-axis damping circuit\n is considered. All per unit are in machine per unit.\n Refer to Chapter 3 of Power System Stability and Control by P. Kundur or Chapter 11 of Power System Dynamics: Stability and Control, by J. Machowski, J. Bialek and J. Bumby, for more details.\n Note that the models are somewhat different (but equivalent) due to the different Park Transformation used in both books",
            "fields": [
                {
                    "name": "R",
                    "comment": "Resistance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_f",
                    "comment": "Field rotor winding resistance in per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_1d",
                    "comment": " Damping rotor winding resistance on d-axis in per unit. This value is denoted as RD in Machowski",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_1q",
                    "comment": "Damping rotor winding resistance on q-axis in per unit. This value is denoted as RQ in Machowski",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_d",
                    "comment": "Inductance of fictitious damping that represent the effect of the three-phase stator winding in the d-axis of the rotor, in per unit. This value is denoted as L_ad + L_l in Kundur (and Ld in Machowski)",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_q",
                    "comment": "Inductance of fictitious damping that represent the effect of the three-phase stator winding in the q-axis of the rotor, in per unit. This value is denoted as L_aq + L_l in Kundur",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_ad",
                    "comment": "Mutual inductance between stator winding and rotor field (and damping) winding inductance on d-axis, in per unit",
                    "null_value": 2,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_aq",
                    "comment": "Mutual inductance between stator winding and rotor damping winding inductance on q-axis, in per unit",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_f1d",
                    "comment": "Mutual inductance between rotor field winding and rotor damping winding inductance on d-axis, in per unit",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_ff",
                    "comment": "Field rotor winding inductance, in per unit",
                    "null_value": 2,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_1d",
                    "comment": "Inductance of the d-axis rotor damping circuit, in per unit",
                    "null_value": 1,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "L_1q",
                    "comment": "Inductance of the q-axis rotor damping circuit, in per unit",
                    "null_value": 2,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "inv_d_fluxlink",
                    "data_type": "Array{Float64,2}",
                    "internal_default": "inv([[-L_d L_ad L_ad]; [-L_ad L_ff L_f1d]; [-L_ad L_f1d L_1d]])",
                    "comment": "(**Do not modify.**) Equations 3.127, 3.130, 3.131 From Kundur"
                },
                {
                    "name": "inv_q_fluxlink",
                    "data_type": "Array{Float64,2}",
                    "internal_default": "inv([[-L_q L_aq]; [-L_aq L_1q]])",
                    "comment": "(**Do not modify.**) Equations 3.128, 3.132 From Kundur"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tψf: field rotor flux,\n\tψ1d: d-axis rotor damping flux,\n\tψ1q: q-axis rotor damping flux",
                    "internal_default": "[:ψf, :ψ1d, :ψ1q]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SimpleFullMachine has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "SimpleMarconatoMachine",
            "docstring": "Parameters of 4-[states](@ref S) synchronous machine: Simplified Marconato model\n The derivative of stator fluxes (ψd and ψq) is neglected and ωψd = ψd and\n ωψq = ψq is assumed (i.e. ω=1.0). This is standard when transmission network\n dynamics is neglected",
            "fields": [
                {
                    "name": "R",
                    "comment": "Resistance after EMF in machine per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in d-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq",
                    "data_type": "Float64",
                    "null_value": 0,
                    "comment": "Reactance after EMF in q-axis per unit",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_p",
                    "comment": "Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_p",
                    "comment": "Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xd_pp",
                    "comment": "Sub-Transient reactance after EMF in d-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Xq_pp",
                    "comment": "Sub-Transient reactance after EMF in q-axis per unit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_p",
                    "comment": "Time constant of transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_p",
                    "comment": "Time constant of transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Td0_pp",
                    "comment": "Time constant of sub-transient d-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tq0_pp",
                    "comment": "Time constant of sub-transient q-axis voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T_AA",
                    "comment": "Time constant of d-axis additional leakage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "γd",
                    "data_type": "Float64",
                    "internal_default": "((Td0_pp*Xd_pp)/(Td0_p*Xd_p) )*(Xd-Xd_p)",
                    "comment": "(**Do not modify.**) Internal equation"
                },
                {
                    "name": "γq",
                    "data_type": "Float64",
                    "internal_default": "((Tq0_pp*Xq_pp)/(Tq0_p*Xq_p) )*(Xq-Xq_p)",
                    "comment": "(**Do not modify.**) Internal equation"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\teq_p: q-axis transient voltage,\n\ted_p: d-axis transient voltage,\n\teq_pp: q-axis subtransient voltage,\n\ted_pp: d-axis subtransient voltage",
                    "internal_default": "[:eq_p, :ed_p, :eq_pp, :ed_pp]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SimpleMarconatoMachine has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Machine"
        },
        {
            "struct_name": "PSSFixed",
            "docstring": "Parameters of a PSS that returns a fixed voltage to add to the reference for the AVR",
            "fields": [
                {
                    "name": "V_pss",
                    "comment": "Fixed voltage stabilization signal in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) PSSFixed has no [states](@ref S)",
                    "internal_default": "Vector{Symbol}()",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) PSSFixed has no states",
                    "internal_default": 0,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "PSS"
        },
        {
            "struct_name": "PSSSimple",
            "docstring": "Parameters of a PSS that returns a proportional droop voltage to add to the reference for the AVR",
            "fields": [
                {
                    "name": "K_ω",
                    "comment": "Proportional gain for frequency",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_p",
                    "comment": "Proportional gain for active power",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) PSSSimple has no [states](@ref S)",
                    "internal_default": "Vector{Symbol}()",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) PSSSimple has no states",
                    "internal_default": 0,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "PSS"
        },
        {
            "struct_name": "IEEEST",
            "docstring": "IEEE Stabilizing Model PSS. ",
            "fields": [
                {
                    "name": "input_code",
                    "comment": "Code input for stabilizer",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 6
                    },
                    "validation_action": "error"
                },
                {
                    "name": "remote_bus_control",
                    "comment": "ACBus identification [`number`](@ref ACBus) for control. `0` identifies the bus connected to this component",
                    "null_value": 0,
                    "data_type": "Int"
                },
                {
                    "name": "A1",
                    "comment": "Filter coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "A2",
                    "comment": "Filter coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "A3",
                    "comment": "Filter coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "A4",
                    "comment": "Filter coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "A5",
                    "comment": "Filter coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "A6",
                    "comment": "Filter coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T1",
                    "comment": "Time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T2",
                    "comment": "Time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T3",
                    "comment": "Time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T4",
                    "comment": "Time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T5",
                    "comment": "Time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T6",
                    "comment": "Time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": "2.0"
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Ks",
                    "comment": "Proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ls_lim",
                    "comment": "PSS output limits for regulator output `(Ls_min, Ls_max)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Vcu",
                    "comment": "Cutoff limiter upper bound",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": "1.25"
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vcl",
                    "comment": "Cutoff limiter lower bound",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": "1.0"
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tx_p1: 1st filter integration,\n\tx_p2: 2nd filter integration, \n\tx_p3: 3rd filter integration, \n\tx_p4: 4rd filter integration, \n\tx_p5: T1/T2 lead-lag integrator, \n\tx_p6: T3/T4 lead-lag integrator, \n\t:x_p7 last integer,",
                    "internal_default": "[:x_p1, :x_p2, :x_p3, :x_p4, :x_p5, :x_p6, :x_p7]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) IEEEST has 7 states",
                    "internal_default": 7,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) IEEEST has 7 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "PSS"
        },
        {
            "struct_name": "STAB1",
            "docstring": "Speed-Sensitive Stabilizing Model",
            "fields": [
                {
                    "name": "KT",
                    "comment": "K/T for washout filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T",
                    "comment": "Time constant for washout filter",
                    "null_value": 0.01,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0.01,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T1T3",
                    "comment": "Time constant division T1/T3",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T3",
                    "comment": "Time constant",
                    "null_value": 0.01,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0.01,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T2T4",
                    "comment": "Time constant division T2/T4",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T4",
                    "comment": "Time constant",
                    "null_value": 0.01,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0.01,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "H_lim",
                    "comment": "PSS output limit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tx_p1: washout filter,\n\tx_p2: T1/T3 lead-lag block, \n\tx_p3: T2/T4 lead-lag block,",
                    "internal_default": "[:x_p1, :x_p2, :x_p3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) STAB1 has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) STAB1 has 3 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "PSS"
        },
        {
            "struct_name": "PSS2A",
            "docstring": "IEEE Dual-Input Stabilizer Model",
            "fields": [
                {
                    "name": "input_code_1",
                    "comment": "First Input Code for stabilizer",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 6
                    },
                    "validation_action": "error"
                },
                {
                    "name": "remote_bus_control_1",
                    "comment": "First Input remote bus identification [`number`](@ref ACBus) for control. `0` identifies the local bus connected to this component",
                    "null_value": 0,
                    "data_type": "Int"
                },
                {
                    "name": "input_code_2",
                    "comment": "Second Input Code for stabilizer",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 6
                    },
                    "validation_action": "error"
                },
                {
                    "name": "remote_bus_control_2",
                    "comment": "Second Input remote bus identification [`number`](@ref ACBus) for control. `0` identifies the local bus connected to this component",
                    "null_value": 0,
                    "data_type": "Int"
                },
                {
                    "name": "M_rtf",
                    "comment": "M parameter for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 8
                    },
                    "validation_action": "error"
                },
                {
                    "name": "N_rtf",
                    "comment": "N parameter for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 8
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Tw1",
                    "comment": "Time constant for first washout filter for first input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw2",
                    "comment": "Time constant for second washout filter for first input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T6",
                    "comment": "Time constant for low-pass filter for first input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw3",
                    "comment": "Time constant for first washout filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw4",
                    "comment": "Time constant for second washout filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T7",
                    "comment": "Time constant for low-pass filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ks2",
                    "comment": "Gain for low-pass filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ks3",
                    "comment": "Gain for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T8",
                    "comment": "Time constant for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T9",
                    "comment": "Time constant for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ks1",
                    "comment": "Gain before lead-lag blocks",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T1",
                    "comment": "Time constant for first lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T2",
                    "comment": "Time constant for first lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T3",
                    "comment": "Time constant for second lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T4",
                    "comment": "Time constant for second lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vst_lim",
                    "comment": "PSS output limits `(Vst_min, Vst_max)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tx_p1: 1st washout 1st input, \n\tx_p2: 2nd washout 1st input, \n\tx_p3: transducer 1st input, \n\tx_p4: 1st washout 2nd input, \n\tx_p5: 2nd washout 2nd input, \n\tx_p6: transducer 2nd input, \n\tx_p7: ramp tracking filter state 1, \n\tx_p8: ramp tracking filter state 2, \n\tx_p9: ramp tracking filter state 3, \n\tx_p10: ramp tracking filter state 4, \n\tx_p11: ramp tracking filter state 5, \n\tx_p12: ramp tracking filter state 6, \n\tx_p13: ramp tracking filter state 7, \n\tx_p14: ramp tracking filter state 8, \n\tx_p15: 1st lead-lag, \n\tx_p16: 2nd lead-lag,",
                    "internal_default": "[:x_p1, :x_p2, :x_p3, :x_p4, :x_p5, :x_p6, :x_p7, :x_p8, :x_p9, :x_p10, :x_p11, :x_p12, :x_p13, :x_p14, :x_p15, :x_p16]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) IEEEST has 16 states",
                    "internal_default": 16,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) IEEEST has 16 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "PSS"
        },
        {
            "struct_name": "PSS2B",
            "docstring": "IEEE 421.5 2005 PSS2B IEEE Dual-Input Stabilizer Model",
            "fields": [
                {
                    "name": "input_code_1",
                    "comment": "First Input Code for stabilizer",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 6
                    },
                    "validation_action": "error"
                },
                {
                    "name": "remote_bus_control_1",
                    "comment": "First Input remote bus identification [`number`](@ref ACBus) for control. `0` identifies the local bus connected to this component",
                    "null_value": 0,
                    "data_type": "Int"
                },
                {
                    "name": "input_code_2",
                    "comment": "Second Input Code for stabilizer",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 6
                    },
                    "validation_action": "error"
                },
                {
                    "name": "remote_bus_control_2",
                    "comment": "Second Input remote bus identification [`number`](@ref ACBus) for control. `0` identifies the local bus connected to this component",
                    "null_value": 0,
                    "data_type": "Int"
                },
                {
                    "name": "M_rtf",
                    "comment": "M parameter for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 8
                    },
                    "validation_action": "error"
                },
                {
                    "name": "N_rtf",
                    "comment": "N parameter for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 8
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Tw1",
                    "comment": "Time constant for first washout filter for first input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw2",
                    "comment": "Time constant for second washout filter for first input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T6",
                    "comment": "Time constant for low-pass filter for first input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw3",
                    "comment": "Time constant for first washout filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw4",
                    "comment": "Time constant for second washout filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T7",
                    "comment": "Time constant for low-pass filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ks2",
                    "comment": "Gain for low-pass filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ks3",
                    "comment": "Gain for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T8",
                    "comment": "Time constant for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T9",
                    "comment": "Time constant for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ks1",
                    "comment": "Gain before lead-lag blocks",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T1",
                    "comment": "Time constant for first lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T2",
                    "comment": "Time constant for first lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T3",
                    "comment": "Time constant for second lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T4",
                    "comment": "Time constant for second lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T10",
                    "comment": "Time constant for third lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T11",
                    "comment": "Time constant for third lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vs1_lim",
                    "comment": "First input limits `(Vs1_min, Vs1_max)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Vs2_lim",
                    "comment": "Second input limits `(Vs2_min, Vs2_max)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Vst_lim",
                    "comment": "PSS output limits `(Vst_min, Vst_max)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tx_p1: 1st washout 1st input, \n\tx_p2: 2nd washout 1st input, \n\tx_p3: transducer 1st input, \n\tx_p4: 1st washout 2nd input, \n\tx_p5: 2nd washout 2nd input, \n\tx_p6: transducer 2nd input, \n\tx_p7: ramp tracking filter state 1, \n\tx_p8: ramp tracking filter state 2, \n\tx_p9: ramp tracking filter state 3, \n\tx_p10: ramp tracking filter state 4, \n\tx_p11: ramp tracking filter state 5, \n\tx_p12: ramp tracking filter state 6, \n\tx_p13: ramp tracking filter state 7, \n\tx_p14: ramp tracking filter state 8, \n\tx_p15: 1st lead-lag, \n\tx_p16: 2nd lead-lag, \n\tx_p17: 3rd lead-lag,",
                    "internal_default": "[:x_p1, :x_p2, :x_p3, :x_p4, :x_p5, :x_p6, :x_p7, :x_p8, :x_p9, :x_p10, :x_p11, :x_p12, :x_p13, :x_p14, :x_p15, :x_p16, :x_p17]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) IEEEST has 17 states",
                    "internal_default": 17,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) IEEEST has 17 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "PSS"
        },
        {
            "struct_name": "PSS2C",
            "docstring": "IEEE 421.5 2016 PSS2C IEEE Dual-Input Stabilizer Model",
            "fields": [
                {
                    "name": "input_code_1",
                    "comment": "First Input Code for stabilizer",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 7
                    },
                    "validation_action": "error"
                },
                {
                    "name": "remote_bus_control_1",
                    "comment": "First Input remote bus identification [`number`](@ref ACBus) for control. `0` identifies the local bus connected to this component",
                    "null_value": 0,
                    "data_type": "Int"
                },
                {
                    "name": "input_code_2",
                    "comment": "Second Input Code for stabilizer",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 6
                    },
                    "validation_action": "error"
                },
                {
                    "name": "remote_bus_control_2",
                    "comment": "Second Input remote bus identification [`number`](@ref ACBus) for control. `0` identifies the local bus connected to this component",
                    "null_value": 0,
                    "data_type": "Int"
                },
                {
                    "name": "M_rtf",
                    "comment": "M parameter for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 8
                    },
                    "validation_action": "error"
                },
                {
                    "name": "N_rtf",
                    "comment": "N parameter for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 8
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Tw1",
                    "comment": "Time constant for first washout filter for first input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw2",
                    "comment": "Time constant for second washout filter for first input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T6",
                    "comment": "Time constant for low-pass filter for first input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw3",
                    "comment": "Time constant for first washout filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw4",
                    "comment": "Time constant for second washout filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T7",
                    "comment": "Time constant for low-pass filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ks2",
                    "comment": "Gain for low-pass filter for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ks3",
                    "comment": "Gain for second input",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T8",
                    "comment": "Time constant for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T9",
                    "comment": "Time constant for ramp tracking filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ks1",
                    "comment": "Gain before lead-lag blocks",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T1",
                    "comment": "Time constant for first lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T2",
                    "comment": "Time constant for first lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T3",
                    "comment": "Time constant for second lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T4",
                    "comment": "Time constant for second lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T10",
                    "comment": "Time constant for third lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T11",
                    "comment": "Time constant for third lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Vs1_lim",
                    "comment": "First input limits `(Vs1_min, Vs1_max)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Vs2_lim",
                    "comment": "Second input limits `(Vs2_min, Vs2_max)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Vst_lim",
                    "comment": "PSS output limits `(Vst_min, Vst_max)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "T12",
                    "comment": "Time constant for fourth lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T13",
                    "comment": "Time constant for fourth lead-lag block",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "PSS_Hysteresis_param",
                    "comment": "PSS output hysteresis parameters `(PSSOFF, PSSON)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Xcomp",
                    "comment": "Stator Leakage Reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tcomp",
                    "comment": "Time measured with compensated frequency",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "hysteresis_binary_logic",
                    "comment": "Hysteresis memory variable",
                    "null_value": 0,
                    "default": "1",
                    "data_type": "Int"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tx_p1: 1st washout 1st input, \n\tx_p2: 2nd washout 1st input, \n\tx_p3: transducer 1st input, \n\tx_p4: 1st washout 2nd input, \n\tx_p5: 2nd washout 2nd input, \n\tx_p6: transducer 2nd input, \n\tx_p7: ramp tracking filter state 1, \n\tx_p8: ramp tracking filter state 2, \n\tx_p9: ramp tracking filter state 3, \n\tx_p10: ramp tracking filter state 4, \n\tx_p11: ramp tracking filter state 5, \n\tx_p12: ramp tracking filter state 6, \n\tx_p13: ramp tracking filter state 7, \n\tx_p14: ramp tracking filter state 8, \n\tx_p15: 1st lead-lag, \n\tx_p16: 2nd lead-lag, \n\tx_p17: 3rd lead-lag, \n\tx_p18: 4th lead-lag, \n\tx_p19: washout block for compensated frequency,",
                    "internal_default": "[:x_p1, :x_p2, :x_p3, :x_p4, :x_p5, :x_p6, :x_p7, :x_p8, :x_p9, :x_p10, :x_p11, :x_p12, :x_p13, :x_p14, :x_p15, :x_p16, :x_p17, :x_p18, :x_p19]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) IEEEST has 19 states",
                    "internal_default": 19,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) IEEEST has 19 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "PSS"
        },
        {
            "struct_name": "SingleMass",
            "docstring": "Parameters of single mass shaft model. Typically represents the rotor mass",
            "fields": [
                {
                    "name": "H",
                    "comment": "Rotor inertia constant in MWs/MVA",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D",
                    "comment": "Rotor natural damping in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tδ: rotor angle,\n\tω: rotor speed",
                    "internal_default": "[:δ, :ω]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) SingleMass has 1 state",
                    "internal_default": 2,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Shaft"
        },
        {
            "struct_name": "FiveMassShaft",
            "docstring": "Parameters of 5 mass-spring shaft model.\n It contains a High-Pressure (HP) steam turbine, Intermediate-Pressure (IP)\n steam turbine, Low-Pressure (LP) steam turbine, the Rotor and an Exciter (EX) mover",
            "fields": [
                {
                    "name": "H",
                    "comment": "Rotor inertia constant in MWs/MVA",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "H_hp",
                    "comment": "High pressure turbine inertia constant in MWs/MVA",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "H_ip",
                    "comment": "Intermediate pressure turbine inertia constant in MWs/MVA",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "H_lp",
                    "comment": "Low pressure turbine inertia constant in MWs/MVA",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "H_ex",
                    "comment": " Exciter inertia constant in MWs/MVA",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D",
                    "comment": "Rotor natural damping in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_hp",
                    "comment": "High pressure turbine natural damping in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_ip",
                    "comment": "Intermediate pressure turbine natural damping in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_lp",
                    "comment": "Low pressure turbine natural damping in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_ex",
                    "comment": "Exciter natural damping in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_12",
                    "comment": "High-Intermediate pressure turbine damping",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_23",
                    "comment": "Intermediate-Low pressure turbine damping",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_34",
                    "comment": "Low pressure turbine-Rotor damping",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_45",
                    "comment": "Rotor-Exciter damping",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_hp",
                    "comment": "High pressure turbine angle coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_ip",
                    "comment": "Intermediate pressure turbine angle coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_lp",
                    "comment": "Low pressure turbine angle coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_ex",
                    "comment": "Exciter angle coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\n\tδ: rotor angle,\n\tω: rotor speed,\n\tδ_hp: rotor angle of high pressure turbine,\n\tω_hp: rotor speed of high pressure turbine,\n\tδ_ip: rotor angle of intermediate pressure turbine,\n\tω_ip: rotor speed of intermediate pressure turbine,\n\tδ_lp: rotor angle of low pressure turbine,\n\tω_lp: rotor speed of low pressure turbine,\n\tδ_ex: rotor angle of exciter,\n\tω_lp: rotor speed of exciter",
                    "internal_default": "[:δ, :ω, :δ_hp, :ω_hp, :δ_ip, :ω_ip, :δ_lp, :ω_lp, :δ_ex, :ω_ex]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) FiveMassShaft has 10 states",
                    "internal_default": 10,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "Shaft"
        },
        {
            "struct_name": "TGFixed",
            "docstring": "Parameters of a fixed Turbine Governor that returns a fixed mechanical torque\n given by the product of P_ref*efficiency",
            "fields": [
                {
                    "name": "efficiency",
                    "comment": "Efficiency factor that multiplies `P_ref`",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) TGFixed has no [states](@ref S)",
                    "internal_default": "Vector{Symbol}()",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) TGFixed has no states",
                    "internal_default": 0,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "GasTG",
            "docstring": "Parameters of Gas Turbine-Governor. GAST in PSSE and GAST_PTI in PowerWorld",
            "fields": [
                {
                    "name": "R",
                    "comment": "Speed droop parameter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 0.1
                    }
                },
                {
                    "name": "T1",
                    "comment": "Governor time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 0.5
                    }
                },
                {
                    "name": "T2",
                    "comment": "Combustion chamber time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 0.5
                    }
                },
                {
                    "name": "T3",
                    "comment": "Load limit time constant (exhaust gas measurement time)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 5
                    }
                },
                {
                    "name": "AT",
                    "comment": "Ambient temperature load limit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Kt",
                    "comment": "Load limit feedback gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 5
                    }
                },
                {
                    "name": "V_lim",
                    "comment": "Operational control limits on fuel valve opening (V_min, V_max)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "D_turb",
                    "comment": "Speed damping coefficient of gas turbine rotor",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Load Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the GAST model are:\n\tx_g1: Fuel valve opening,\n\tx_g2: Fuel flow,\n\tx_g3: Exhaust temperature load",
                    "internal_default": "[:x_g1, :x_g2, :x_g3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) GasTG has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) GAST has 3 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "DEGOV",
            "docstring": "Parameters Woodward Diesel Governor Model. DEGOV in PowerWorld",
            "fields": [
                {
                    "name": "T1",
                    "comment": "Governor mechanism time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 100.0
                    }
                },
                {
                    "name": "T2",
                    "comment": "Turbine power time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 100.0
                    }
                },
                {
                    "name": "T3",
                    "comment": "Turbine exhaust temperature time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 100.0
                    }
                },
                {
                    "name": "K",
                    "comment": "Governor gain (reciprocal of droop)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 100.0
                    }
                },
                {
                    "name": "T4",
                    "comment": "Governor lead time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 100.0
                    }
                },
                {
                    "name": "T5",
                    "comment": "Governor lag time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 100.0
                    }
                },
                {
                    "name": "T6",
                    "comment": "Actuator time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 100.0
                    }
                },
                {
                    "name": "Td",
                    "comment": "Engine time delay",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 100.0
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Load Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the DEGOV model are:\n\tx_ecb1: Electric control box 1,\n\tx_ecb2: Electric control box 2,\n\tx_a1: Actuator 1,\n\tx_a2: Actuator 2,\n\tx_a3: Actuator 3,",
                    "internal_default": "[:x_ecb1, :x_ecb2, :x_a1, :x_a2, :x_a3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) DEGOV has 5 states",
                    "internal_default": 5,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) DEGOV has 5 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "DEGOV1",
            "docstring": "Parameters Woodward Diesel Governor Model. DEGOV1 in PSSE",
            "fields": [
                {
                    "name": "droop_flag",
                    "comment": "Droop control Flag. 0 for throttle feedback and 1 for electric power feedback",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "T1",
                    "comment": "Governor mechanism time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "T2",
                    "comment": "Turbine power time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "T3",
                    "comment": "Turbine exhaust temperature time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "K",
                    "comment": "Governor gain for actuator",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "T4",
                    "comment": "Governor lead time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "T5",
                    "comment": "Governor lag time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "T6",
                    "comment": "Actuator time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "Td",
                    "comment": "Engine time delay in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "T_lim",
                    "comment": "Operational control limits on actuator (T_min, T_max)",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "R",
                    "comment": "Steady state droop parameter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "Te",
                    "comment": "Power transducer time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 100.0
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Load Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the DEGOV1 model depends on the droop flag",
                    "internal_default": "PowerSystems.get_degov1_states(droop_flag)[1]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The number of [states](@ref S) of the DEGOV1 model depends on the droop flag",
                    "internal_default": "PowerSystems.get_degov1_states(droop_flag)[2]",
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "GeneralGovModel",
            "docstring": "GE General Governor/Turbine Model. The GeneralGovModel (GGOV1) model is a general purpose governor model used for a variety of prime movers controlled by proportional-integral-derivative (PID) governors including gas turbines",
            "fields": [
                {
                    "name": "Rselect",
                    "comment": "Feedback signal for governor droop",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": -2,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "fuel_flag",
                    "comment": "Flag Switch for fuel source characteristic",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "R",
                    "comment": "Speed droop parameter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tpelec",
                    "comment": "Electrical power transducer time constant, seconds",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "speed_error_signal",
                    "comment": "Speed error signal limits",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Kp_gov",
                    "comment": "Governor proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ki_gov",
                    "comment": "Governor integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kd_gov",
                    "comment": "Governor derivative gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Td_gov",
                    "comment": "Governor derivative time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "valve_position_limits",
                    "comment": "Valve position limits",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "T_act",
                    "comment": "Actuator time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K_turb",
                    "comment": "Turbine gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Wf_nl",
                    "comment": "No load fuel flow, pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Turbine lag time constant, sec",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tc",
                    "comment": "Turbine lead time constant, sec",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T_eng",
                    "comment": "Transport lag time constant for diesel engine, sec",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tf_load",
                    "comment": "Load limiter time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kp_load",
                    "comment": "Load limiter proportional gain for PI controller",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ki_load",
                    "comment": "Load integral gain for PI controller",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ld_ref",
                    "comment": "Load limiter integral gain for PI controller",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Dm",
                    "comment": "Mechanical damping coefficient, pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "R_open",
                    "comment": "Maximum valve opening rate, pu/sec",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "R_close",
                    "comment": "Maximum valve closing rate, pu/sec",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ki_mw",
                    "comment": "Power controller (reset) gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "A_set",
                    "comment": "Acceleration limiter setpoint, pu/sec",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ka",
                    "comment": "Acceleration limiter gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Acceleration limiter time constant ",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "error"
                },
                {
                    "name": "T_rate",
                    "comment": "Turbine rating",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "db",
                    "comment": "Speed governor deadband",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tsa",
                    "comment": "Temperature detection lead time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tsb",
                    "comment": "Temperature detection lag time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "R_lim",
                    "comment": "Maximum rate of load increase",
                    "null_value": "(up = 0.0, down = 0.0)",
                    "data_type": "UpDown"
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the GGOV1 model are:\n\tPe: Machine Electrical Power Measurement,\n\tx_g1: Governor differential control,\n\tx_g2: Governor integral control, \n\tx_g3: Turbine actuator, \n\tx_g4: Turbine Lead-Lag, \n\tx_g5: Turbine load limiter measurement, \n\tx_g6: Turbine Load Limiter Integral Control, \n\tx_g7: Supervisory Load Control, \n\tx_g8: Acceleration Control, \n\tx_g9 Temperature Detection Lead - Lag:",
                    "internal_default": "[:Pe, :x_g1, :x_g2, :x_g3, :x_g4, :x_g5, :x_g6, :x_g7, :x_g8, :x_g9]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) GeneralGovModel has 10 states",
                    "internal_default": 10,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) GGOV1 has 10 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Differential, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "PIDGOV",
            "docstring": "Hydro Turbine-Governor with PID controller.",
            "fields": [
                {
                    "name": "feedback_flag",
                    "comment": "Feedback signal for governor droop: 0 for electrical power, and 1 for gate position.",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Rperm",
                    "comment": "Speed permanent droop parameter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T_reg",
                    "comment": "Speed detector time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kp",
                    "comment": "Governor proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ki",
                    "comment": "Governor integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kd",
                    "comment": "Governor derivative gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Governor derivative time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Gate-servo time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "D_turb",
                    "comment": "Turbine damping factor",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "gate_openings",
                    "comment": "Gate-opening speed at different loads",
                    "null_value": "(0.0, 0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64, Float64}"
                },
                {
                    "name": "power_gate_openings",
                    "comment": "Power at gate_openings",
                    "null_value": "(0.0, 0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64, Float64}"
                },
                {
                    "name": "G_lim",
                    "comment": "Minimum/Maximum Gate openings `(G_min, G_max)`.",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "A_tw",
                    "comment": "Factor multiplying Tw",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tw",
                    "comment": "Water inertia time constant, sec",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "V_lim",
                    "comment": "Gate opening velocity limits `(G_min, G_max)`.",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the PIDGOV model are:\n\tx_g1: Filtered input measurement,\n\tx_g2: PI block internal state,\n\tx_g3: First regulator state, \n\tx_g4: Derivative block internal state, \n\tx_g5: Second regulator state, \n\tx_g6: Gate position state, \n\tx_g7: Water inertia state",
                    "internal_default": "[:x_g1, :x_g2, :x_g3, :x_g4, :x_g5, :x_g6, :x_g7]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) PIDGOV has 7 states",
                    "internal_default": 7,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) PIDGOV has 7 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "WPIDHY",
            "docstring": "Woodward PID Hydro Governor",
            "fields": [
                {
                    "name": "T_reg",
                    "comment": "Input time constant of the governor in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "reg",
                    "comment": "Input governor gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kp",
                    "comment": "Governor proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ki",
                    "comment": "Governor integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Kd",
                    "comment": "Governor derivative gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Ta",
                    "comment": "Governor derivative/high-frequency time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tb",
                    "comment": "Gate-servo time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "V_lim",
                    "comment": "Gate opening velocity limits `(G_min, G_max)`.",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "G_lim",
                    "comment": "Minimum/Maximum Gate velocity `(G_min, G_max)`.",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Tw",
                    "comment": "Water inertia time constant, sec",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "P_lim",
                    "comment": "Minimum/Maximum Gate openings `(P_min, P_max)`.",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "D",
                    "comment": "Turbine damping coefficient",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "gate_openings",
                    "comment": "Gate-opening speed at different loads",
                    "null_value": "(0.0, 0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64, Float64}"
                },
                {
                    "name": "power_gate_openings",
                    "comment": "Power at gate_openings",
                    "null_value": "(0.0, 0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64, Float64}"
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the PIDGOV model are:\n\tx_g1: Filtered input measurement,\n\tx_g2: PI block internal state,\n\tx_g3: First regulator state, \n\tx_g4: Derivative block internal state, \n\tx_g5: Second regulator state, \n\tx_g6: Gate position state, \n\tx_g7: Water inertia state",
                    "internal_default": "[:x_g1, :x_g2, :x_g3, :x_g4, :x_g5, :x_g6, :x_g7]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) PIDGOV has 7 states",
                    "internal_default": 7,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) PIDGOV has 7 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "SteamTurbineGov1",
            "docstring": "Steam Turbine-Governor. This model considers both TGOV1 or TGOV1DU in PSS/E",
            "fields": [
                {
                    "name": "R",
                    "comment": "Droop parameter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T1",
                    "comment": "Governor time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 0.5
                    },
                    "validation_action": "error"
                },
                {
                    "name": "valve_position_limits",
                    "comment": "Valve position limits",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "T2",
                    "comment": "Lead Lag Lead Time constant ",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T3",
                    "comment": "Lead Lag Lag Time constant ",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 10
                    },
                    "validation_action": "error"
                },
                {
                    "name": "D_T",
                    "comment": "Turbine Damping",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "DB_h",
                    "comment": "Deadband for overspeed",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "DB_l",
                    "comment": "Deadband for underspeed",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": null,
                        "max": 0
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T_rate",
                    "comment": "Turbine Rate (MW). If zero, generator base is used",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the SteamTurbineGov1 model are:\n\tx_g1: Valve Opening,\n\tx_g2: Lead-lag state",
                    "internal_default": "[:x_g1, :x_g2]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) TGOV1 has 2 states",
                    "internal_default": 2,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) TGOV1 has 2 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "HydroTurbineGov",
            "docstring": "Hydro Turbine-Governor",
            "fields": [
                {
                    "name": "R",
                    "comment": "Permanent droop parameter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "r",
                    "comment": "Temporary Droop",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 2
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "Tr",
                    "comment": "Governor time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 30
                    },
                    "validation_action": "error"
                },
                {
                    "name": "Tf",
                    "comment": "Filter Time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 0.1
                    },
                    "valiation_action": "error"
                },
                {
                    "name": "Tg",
                    "comment": "Servo time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "VELM",
                    "comment": "gate velocity limit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 0.3
                    },
                    "validation_action": "error"
                },
                {
                    "name": "gate_position_limits",
                    "comment": "Gate position limits",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Tw",
                    "comment": "water time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 3
                    },
                    "validation_action": "error"
                },
                {
                    "name": "At",
                    "comment": "Turbine gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0.8,
                        "max": 1.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "D_T",
                    "comment": "Turbine Damping",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "q_nl",
                    "comment": "No-power flow",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the HydroTurbineGov model are:\n\tx_g1: filter_output,\n\tx_g2: desired gate, \n\tx_g3: gate opening, \n\tx_g4: turbine flow",
                    "internal_default": "[:x_g1, :x_g2, :x_g3, :x_g4]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) HYGOV has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) HYGOV has 4 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Differential, StateTypes.Differential, StateTypes.Differential]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "IEEETurbineGov1",
            "docstring": "IEEE Type 1 Speed-Governing Model",
            "fields": [
                {
                    "name": "K",
                    "comment": "Governor Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 5,
                        "max": 30
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T1",
                    "comment": "Input Filter Lag",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T2",
                    "comment": "Input Filter Lead",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T3",
                    "comment": "Valve position Time Constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": "eps()",
                        "max": 1
                    },
                    "validation_action": "error"
                },
                {
                    "name": "U0",
                    "comment": "Maximum Valve Opening Rate",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0.01,
                        "max": 0.03
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "U_c",
                    "comment": "Maximum Valve closing rate",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": -0.3,
                        "max": 0
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "valve_position_limits",
                    "comment": "Valve position limits in MW",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "T4",
                    "comment": "Time Constant inlet steam",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K1",
                    "comment": "Fraction of high presure shaft power",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": -2,
                        "max": 1
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K2",
                    "comment": "Fraction of low presure shaft power",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T5",
                    "comment": "Time constant for second boiler pass",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K3",
                    "comment": "Fraction of high presure shaft power second boiler pass",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K4",
                    "comment": "Fraction of low presure shaft power second boiler pass",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.5
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T6",
                    "comment": "Time constant for third boiler pass",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K5",
                    "comment": "Fraction of high presure shaft power third boiler pass",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.35
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K6",
                    "comment": "Fraction of low presure shaft power third boiler pass",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.55
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "T7",
                    "comment": "Time constant for fourth boiler pass",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 10
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K7",
                    "comment": "Fraction of high presure shaft power fourth boiler pass",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "K8",
                    "comment": "Fraction of low presure shaft power fourth boiler pass",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 0.3
                    },
                    "validation_action": "warn"
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the IEEETurbineGov model are:\n\tx_g1: First Governor integrator,\n\tx_g2: Governor output,\n\tx_g3: First Turbine integrator, \n\tx_g4: Second Turbine Integrator, \n\tx_g5: Third Turbine Integrator, \n\tx_g6: Fourth Turbine Integrator, ",
                    "internal_default": "[:x_g1, :x_g2, :x_g3, :x_g4, :x_g5, :x_g6]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) IEEEG1 has 6 states",
                    "internal_default": 6,
                    "data_type": "Int"
                },
                {
                    "name": "states_types",
                    "comment": "(**Do not modify.**) IEEEG1 has 6 [differential](@ref states_list) [states](@ref S)",
                    "internal_default": "[StateTypes.Differential, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid, StateTypes.Hybrid]",
                    "data_type": "Vector{StateTypes}"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "TGTypeI",
            "docstring": "Parameters of a Turbine Governor Type I",
            "fields": [
                {
                    "name": "R",
                    "comment": "Droop parameter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Ts",
                    "comment": "Governor time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tc",
                    "comment": "Servo time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T3",
                    "comment": "Transient gain time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T4",
                    "comment": "Power fraction time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T5",
                    "comment": "Reheat time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "valve_position_limits",
                    "comment": "Valve position limits in MW",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the TGTypeI model are:\n\tx_g1: Governor state,\n\tx_g2: Servo state,\n\tx_g3: Reheat state",
                    "internal_default": "[:x_g1, :x_g2, :x_g3]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) TGTypeI has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "TGTypeII",
            "docstring": "Parameters of a Turbine Governor Type II",
            "fields": [
                {
                    "name": "R",
                    "comment": "Droop parameter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T1",
                    "comment": "Transient gain time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T2",
                    "comment": "Power fraction time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "τ_limits",
                    "comment": "Power into the governor limits",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the TGTypeI model are:\n\tx_g1: lead-lag state",
                    "internal_default": "[:xg]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) TGTypeII has 1 state",
                    "internal_default": 1,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "TGSimple",
            "docstring": "Parameters of a Simple one-state Turbine Governor",
            "fields": [
                {
                    "name": "d_t",
                    "comment": "Inverse Droop parameter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tm",
                    "comment": "Turbine Governor Low-Pass Time Constant [s]",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the TGSimple model are:\n\tτm: mechanical torque",
                    "internal_default": "[:τm]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) TGSimple has 1 state",
                    "internal_default": 1,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "TurbineGov"
        },
        {
            "struct_name": "AverageConverter",
            "docstring": "Parameters of an average converter model",
            "fields": [
                {
                    "name": "rated_voltage",
                    "comment": "Rated voltage (V)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rated_current",
                    "comment": "Rated current (A)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) AverageConverter has no [states](@ref S)",
                    "internal_default": "Vector{Symbol}()",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) AverageConverter has no states",
                    "internal_default": 0,
                    "data_type": "Int"
                }
            ],
            "supertype": "Converter"
        },
        {
            "struct_name": "RenewableEnergyConverterTypeA",
            "docstring": "Parameters of a renewable energy generator/converter model, this model corresponds to REGCA1 in PSSE",
            "fields": [
                {
                    "name": "T_g",
                    "comment": "Converter time constant (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Rrpwr",
                    "comment": "Low Voltage Power Logic (LVPL) ramp rate limit (pu/s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Brkpt",
                    "comment": "LVPL characteristic voltage 2 (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Zerox",
                    "comment": "LVPL characteristic voltage 1 (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Lvpl1",
                    "comment": "LVPL gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Vo_lim",
                    "comment": "Voltage limit for high voltage reactive current management (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Lv_pnts",
                    "comment": "Voltage points for low voltage active current management (pu) (Lvpnt0, Lvpnt1)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Io_lim",
                    "comment": "Current limit (pu) for high voltage reactive current management (specified as a negative value)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": null,
                        "max": 0
                    }
                },
                {
                    "name": "T_fltr",
                    "comment": "Voltage filter time constant for low voltage active current management (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_hv",
                    "comment": "Overvoltage compensation gain used in the high voltage reactive current management",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Iqr_lims",
                    "comment": "Limit on rate of change for reactive current (pu/s) (Iqr_min, Iqr_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Accel",
                    "comment": "Acceleration factor",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Lvpl_sw",
                    "comment": "Low voltage power logic (LVPL) switch. (0: LVPL not present, 1: LVPL present)",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Q_ref",
                    "comment": "Initial condition of reactive power from power flow",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_source",
                    "comment": "Output resistor used for the Thevenin Equivalent",
                    "null_value": 0,
                    "default": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_source",
                    "comment": "Output reactance used for the Thevenin Equivalent",
                    "null_value": 0,
                    "default": "1.0e5",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\tIp: Converter lag for Ipcmd,\tIq: Converter lag for Iqcmd,\tVmeas: Voltage filter for low voltage active current management",
                    "internal_default": "[:Ip, :Iq, :Vmeas]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) RenewableEnergyConverterTypeA has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                }
            ],
            "supertype": "Converter"
        },
        {
            "struct_name": "RenewableEnergyVoltageConverterTypeA",
            "docstring": "Parameters of a renewable energy generator/converter model, this model corresponds to REGCA1 in PSSE, but to be interfaced using a Voltage Source instead of a Current Source",
            "fields": [
                {
                    "name": "T_g",
                    "comment": "Converter time constant (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Rrpwr",
                    "comment": "Low Voltage Power Logic (LVPL) ramp rate limit (pu/s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Brkpt",
                    "comment": "LVPL characteristic voltage 2 (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Zerox",
                    "comment": "LVPL characteristic voltage 1 (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Lvpl1",
                    "comment": "LVPL gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Vo_lim",
                    "comment": "Voltage limit for high voltage reactive current management (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Lv_pnts",
                    "comment": "Voltage points for low voltage active current management (pu) (Lvpnt0, Lvpnt1)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Io_lim",
                    "comment": "Current limit (pu) for high voltage reactive current management (specified as a negative value)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": null,
                        "max": 0
                    }
                },
                {
                    "name": "T_fltr",
                    "comment": "Voltage filter time constant for low voltage active current management (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_hv",
                    "comment": "Overvoltage compensation gain used in the high voltage reactive current management",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Iqr_lims",
                    "comment": "Limit on rate of change for reactive current (pu/s) (Iqr_min, Iqr_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Accel",
                    "comment": "Acceleration factor",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Lvpl_sw",
                    "comment": "Low voltage power logic (LVPL) switch. (0: LVPL not present, 1: LVPL present)",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Q_ref",
                    "comment": "Initial condition of reactive power from power flow",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) are:\tIp: Converter lag for Ipcmd,\tIq: Converter lag for Iqcmd,\tVmeas: Voltage filter for low voltage active current management",
                    "internal_default": "[:Ip, :Iq, :Vmeas]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) RenewableEnergyVoltageConverterTypeA has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                }
            ],
            "supertype": "Converter"
        },
        {
            "struct_name": "FixedDCSource",
            "docstring": "Parameters of a Fixed DC Source that returns a fixed DC voltage",
            "fields": [
                {
                    "name": "voltage",
                    "comment": "Voltage (V)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) FixedDCSource has no [states](@ref S)",
                    "internal_default": "Vector{Symbol}()",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) FixedDCSource has no states",
                    "internal_default": 0,
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DCSource"
        },
        {
            "struct_name": "ZeroOrderBESS",
            "docstring": "Parameters for the DC-side with a Battery Energy Storage System from [\"Grid-Coupled Dynamic Response of Battery-Driven Voltage Source Converters.\"](https://arxiv.org/abs/2007.11776)",
            "fields": [
                {
                    "name": "rated_voltage",
                    "comment": "Rated voltage (V)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rated_current",
                    "comment": "Rated current (A)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "battery_voltage",
                    "comment": "battery voltage in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "battery_resistance",
                    "comment": "Battery resistance in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "dc_dc_inductor",
                    "comment": "DC/DC inductance in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "dc_link_capacitance",
                    "comment": "DC-link capacitance in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "fs",
                    "comment": "DC/DC converter switching frequency (kHz)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kpv",
                    "comment": "voltage controller proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kiv",
                    "comment": "voltage controller integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kpi",
                    "comment": "current controller proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kii",
                    "comment": "current controller integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Vdc_ref",
                    "comment": "Reference DC-Voltage Set-point in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "default": "1.1",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ZeroOrderBESS model are:\n\tv_dc: DC-link voltage,\n\ti_b: Battery current,\n\t ν: integrator state of the voltage controller,\n\t ζ: integrator state of the PI current controller",
                    "internal_default": "[:v_dc, :i_b, :ν, :ζ]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ZeroOrderBESS has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                }
            ],
            "supertype": "DCSource"
        },
        {
            "struct_name": "LCLFilter",
            "docstring": "Parameters of a LCL filter outside the converter, the [states](@ref S) are in the grid's reference frame",
            "fields": [
                {
                    "name": "lf",
                    "comment": "Series inductance in p.u. of converter filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rf",
                    "comment": "Series resistance in p.u. of converter filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "cf",
                    "comment": "Shunt capacitance in p.u. of converter filter",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "lg",
                    "comment": "Series inductance in p.u. of converter filter to the grid",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rg",
                    "comment": "Series resistance in p.u. of converter filter to the grid",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the LCLFilter model are:\n\tir_cnv: Real current out of the converter,\n\tii_cnv: Imaginary current out of the converter,\n\tvr_filter: Real voltage at the filter's capacitor,\n\tvi_filter: Imaginary voltage at the filter's capacitor,\n\tir_filter: Real current out of the filter,\n\tii_filter: Imaginary current out of the filter",
                    "internal_default": "[:ir_cnv, :ii_cnv, :vr_filter, :vi_filter, :ir_filter, :ii_filter]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) LCLFilter has 6 states",
                    "internal_default": 6,
                    "data_type": "Int"
                }
            ],
            "supertype": "Filter"
        },
        {
            "struct_name": "LCFilter",
            "docstring": "Parameters of a LCL filter outside the converter",
            "fields": [
                {
                    "name": "lf",
                    "comment": "filter inductance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rf",
                    "comment": "filter resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "cf",
                    "comment": "filter capacitance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the LCFilter model are:\n\tir_filter: Real current out of the filter,\n\tii_filter: Imaginary current out of the filter",
                    "internal_default": "[:ir_filter, :ii_filter]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) LCFilter has two states",
                    "internal_default": 2,
                    "data_type": "Int"
                }
            ],
            "supertype": "Filter"
        },
        {
            "struct_name": "RLFilter",
            "docstring": "Parameters of RL series filter in algebraic representation",
            "fields": [
                {
                    "name": "rf",
                    "comment": "Series resistance in p.u. of converter filter to the grid",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "lf",
                    "comment": "Series inductance in p.u. of converter filter to the grid",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) RLFilter has zero [states](@ref S)",
                    "internal_default": "Vector{Symbol}()",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) RLFilter has zero states",
                    "internal_default": 0,
                    "data_type": "Int"
                }
            ],
            "supertype": "Filter"
        },
        {
            "struct_name": "KauraPLL",
            "docstring": "Parameters of a Phase-Locked Loop (PLL) based on [\"Operation of a phase locked loop system under distorted utility conditions\"](https://doi.org/10.1109/28.567077) by Vikram Kaura, and Vladimir Blasko",
            "fields": [
                {
                    "name": "ω_lp",
                    "comment": "PLL low-pass filter frequency (rad/sec)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kp_pll",
                    "comment": "PLL proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ki_pll",
                    "comment": "PLL integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the KauraPLL model are:\n\tvd_pll: d-axis of the measured voltage in the PLL synchronous reference frame (SRF),\n\tvq_pll: q-axis of the measured voltage in the PLL SRF,\n\tε_pll: Integrator state of the PI controller,\n\tθ_pll: Phase angle displacement in the PLL SRF",
                    "internal_default": "[:vd_pll, :vq_pll, :ε_pll, :θ_pll]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) KauraPLL has 4 states",
                    "internal_default": 4,
                    "data_type": "Int"
                }
            ],
            "supertype": "FrequencyEstimator"
        },
        {
            "struct_name": "ReducedOrderPLL",
            "docstring": "Parameters of a Phase-Locked Loop (PLL) based on [\"Reduced-order Structure-preserving Model for Parallel-connected Three-phase Grid-tied Inverters.\"](https://doi.org/10.1109/COMPEL.2017.8013389)",
            "fields": [
                {
                    "name": "ω_lp",
                    "comment": "PLL low-pass filter frequency (rad/sec)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kp_pll",
                    "comment": "PLL proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ki_pll",
                    "comment": "PLL integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ReducedOrderPLL model are:\n\tvq_pll: q-axis of the measured voltage in the PLL synchronous reference frame (SRF),\n\tε_pll: Integrator state of the PI controller,\n\tθ_pll: Phase angle displacement in the PLL SRF",
                    "internal_default": "[:vq_pll, :ε_pll, :θ_pll]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ReducedOrderPLL has 3 states",
                    "internal_default": 3,
                    "data_type": "Int"
                }
            ],
            "supertype": "FrequencyEstimator"
        },
        {
            "struct_name": "FixedFrequency",
            "docstring": "Parameters of a Fixed Frequency Estimator (i.e. no PLL)",
            "fields": [
                {
                    "name": "frequency",
                    "comment": "Reference Frequency (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "default": "1.0"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) FixedFrequency has no [states](@ref S)",
                    "internal_default": "Vector{Symbol}()",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) FixedFrequency has no states",
                    "internal_default": 0,
                    "data_type": "Int"
                }
            ],
            "supertype": "FrequencyEstimator"
        },
        {
            "struct_name": "VirtualInertia",
            "docstring": "Parameters of a Virtual Inertia with SRF using VSM for active power controller",
            "fields": [
                {
                    "name": "Ta",
                    "comment": "VSM inertia constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kd",
                    "comment": "VSM damping constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kω",
                    "comment": "frequency droop gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the VirtualInertia model are:\n\tθ_oc: Phase angle displacement of the virtual synchronous generator model\n\tω_oc: Speed of the rotating reference frame of the virtual synchronous generator model",
                    "internal_default": "[:θ_oc, :ω_oc]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) VirtualInertia has two states",
                    "internal_default": 2,
                    "data_type": "Int"
                }
            ],
            "supertype": "ActivePowerControl"
        },
        {
            "struct_name": "ActivePowerDroop",
            "docstring": "Parameters of an Active Power droop controller",
            "fields": [
                {
                    "name": "Rp",
                    "comment": "Droop Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ωz",
                    "comment": "filter frequency cutoff",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ActivePowerDroop model are:\n\tθ_oc: Phase angle displacement of the inverter model,\n\tp_oc: Measured active power of the inverter model",
                    "internal_default": "[:θ_oc, :p_oc]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ActivePowerDroop has two states",
                    "internal_default": 2,
                    "data_type": "Int"
                }
            ],
            "supertype": "ActivePowerControl"
        },
        {
            "struct_name": "ActivePowerPI",
            "docstring": "Parameters of a Proportional-Integral Active Power controller for a specified power reference",
            "fields": [
                {
                    "name": "Kp_p",
                    "comment": "Proportional Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Ki_p",
                    "comment": "Integral Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ωz",
                    "comment": "filter frequency cutoff",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ActivePowerPI model are:\n\tσp_oc: Integrator state of the PI Controller,\n\tp_oc: Measured active power of the inverter model",
                    "internal_default": "[:σp_oc, :p_oc]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ActivePowerPI has two states",
                    "internal_default": 2,
                    "data_type": "Int"
                }
            ],
            "supertype": "ActivePowerControl"
        },
        {
            "struct_name": "ActiveVirtualOscillator",
            "docstring": "Parameters of an Active Virtual Oscillator controller. Model is based on [\"Model Reduction for Inverters with Current Limiting and Dispatchable Virtual Oscillator Control.\"](https://doi.org/10.1109/TEC.2021.3083488)",
            "fields": [
                {
                    "name": "k1",
                    "comment": "VOC Synchronization Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ψ",
                    "comment": "Rotation angle of the controller",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ActiveVirtualOscillator model are:\n\tθ_oc: Phase angle displacement of the inverter model",
                    "internal_default": "[:θ_oc]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ActiveVirtualOscillator has one state",
                    "internal_default": 1,
                    "data_type": "Int"
                }
            ],
            "supertype": "ActivePowerControl"
        },
        {
            "struct_name": "ActiveRenewableControllerAB",
            "docstring": "Parameters of Active Power Controller including REPCA1 and REECB1",
            "fields": [
                {
                    "name": "bus_control",
                    "comment": "ACBus identification [`number`](@ref ACBus) for voltage control. `0` identifies the local bus connected to this component",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "from_branch_control",
                    "comment": "Monitored branch FROM bus number for line drop compensation (if 0 generator power will be used)",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "to_branch_control",
                    "comment": "Monitored branch TO bus number for line drop compensation (if 0 generator power will be used)",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "branch_id_control",
                    "comment": "Branch circuit id for line drop compensation (as a string). If 0 generator power will be used",
                    "null_value": 0,
                    "data_type": "String"
                },
                {
                    "name": "Freq_Flag",
                    "comment": "Frequency Flag for REPCA1: 0: disable, 1:enable",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "K_pg",
                    "comment": "Active power PI control proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_ig",
                    "comment": "Active power PI control integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T_p",
                    "comment": "Real power measurement filter time constant (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "fdbd_pnts",
                    "comment": "Frequency error dead band thresholds `(fdbd1, fdbd2)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "fe_lim",
                    "comment": "Upper/Lower limit on frequency error `(fe_min, fe_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "P_lim",
                    "comment": "Upper/Lower limit on power reference `(P_min, P_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "T_g",
                    "comment": "Power Controller lag time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_dn",
                    "comment": "Droop for over-frequency conditions",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": null,
                        "max": 0
                    }
                },
                {
                    "name": "D_up",
                    "comment": "Droop for under-frequency conditions",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "dP_lim",
                    "comment": "Upper/Lower limit on power reference ramp rates`(dP_min, dP_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "P_lim_inner",
                    "comment": "Upper/Lower limit on power reference for REECB`(P_min_inner, P_max_inner)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "T_pord",
                    "comment": "Power filter time constant REECB time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ActiveRenewableControllerAB model depends on the Flag",
                    "internal_default": "PowerSystems.get_activeRETypeAB_states(Freq_Flag)[1]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The states of the ActiveRenewableControllerAB model depends on the Flag",
                    "internal_default": "PowerSystems.get_activeRETypeAB_states(Freq_Flag)[2]",
                    "data_type": "Int"
                }
            ],
            "supertype": "ActivePowerControl"
        },
        {
            "struct_name": "ReactiveRenewableControllerAB",
            "docstring": "Parameters of Reactive Power Controller including REPCA1 and REECB1",
            "fields": [
                {
                    "name": "bus_control",
                    "comment": "ACBus identification [`number`](@ref ACBus) for voltage control. `0` identifies the local bus connected to this component",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "from_branch_control",
                    "comment": "Monitored branch FROM bus identification number for line drop compensation (if 0 generator power will be used)",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "to_branch_control",
                    "comment": "Monitored branch TO bus identification number for line drop compensation (if 0 generator power will be used)",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "branch_id_control",
                    "comment": "Branch circuit id for line drop compensation (as a string). If 0 generator power will be used",
                    "null_value": 0,
                    "data_type": "String"
                },
                {
                    "name": "VC_Flag",
                    "comment": "Voltage Compensator Flag for REPCA1",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Ref_Flag",
                    "comment": "Flag for Reactive Power Control for REPCA1. 0: Q-control, 1: V-control",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "PF_Flag",
                    "comment": "Flag for Power Factor Control for Outer Control of REECB1. 0: Q-control, 1: Power Factor Control",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "V_Flag",
                    "comment": "Flag for Voltage Control for Outer Control of REECB1. 0: Voltage Control, 1: Q-Control",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "T_fltr",
                    "comment": "Voltage or Q-power of REPCA Filter Time Constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_p",
                    "comment": "Reactive power PI control proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_i",
                    "comment": "Reactive power PI control integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T_ft",
                    "comment": "Reactive power lead time constant (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T_fv",
                    "comment": "Reactive power lag time constant (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_frz",
                    "comment": "Voltage below which state ξq_oc (integrator state) is freeze",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "R_c",
                    "comment": "Line drop compensation resistance (used when VC_Flag = 1)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_c",
                    "comment": "Line drop compensation reactance (used when VC_Flag = 1)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_c",
                    "comment": "Reactive current compensation gain (pu) (used when VC_Flag = 0)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "e_lim",
                    "comment": "Upper/Lower limit on Voltage or Q-power deadband output `(e_min, e_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "dbd_pnts",
                    "comment": "Voltage or Q-power error dead band thresholds `(dbd1, dbd2)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "Q_lim",
                    "comment": "Upper/Lower limit on reactive power V/Q control in REPCA `(Q_min, Q_max)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "T_p",
                    "comment": "Active power lag time constant in REECB (s). Used only when PF_Flag = 1",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Q_lim_inner",
                    "comment": "Upper/Lower limit on reactive power input in REECB `(Q_min_inner, Q_max_inner)`. Only used when V_Flag = 1",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "V_lim",
                    "comment": "Upper/Lower limit on reactive power PI controller in REECB `(V_min, V_max)`. Only used when V_Flag = 1",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "K_qp",
                    "comment": "Reactive power regulator proportional gain (used when V_Flag = 1)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_qi",
                    "comment": "Reactive power regulator integral gain (used when V_Flag = 1)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Q_ref",
                    "comment": "Reference Reactive Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ReactiveRenewableControllerAB model depends on the Flag",
                    "internal_default": "PowerSystems.get_reactiveRETypeAB_states(Ref_Flag, PF_Flag, V_Flag)[1]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The states of the ReactiveRenewableControllerAB model depends on the Flag",
                    "internal_default": "PowerSystems.get_reactiveRETypeAB_states(Ref_Flag, PF_Flag, V_Flag)[2]",
                    "data_type": "Int"
                }
            ],
            "supertype": "ReactivePowerControl"
        },
        {
            "struct_name": "ReactivePowerDroop",
            "docstring": "Parameters of a Reactive Power droop controller",
            "fields": [
                {
                    "name": "kq",
                    "comment": "frequency droop gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ωf",
                    "comment": "filter frequency cutoff",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ReactivePowerDroop model are:\n\tq_oc: Filtered reactive output power",
                    "internal_default": "[:q_oc]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ReactivePowerDroop has 1 state",
                    "internal_default": 1,
                    "data_type": "Int"
                }
            ],
            "supertype": "ReactivePowerControl"
        },
        {
            "struct_name": "ReactivePowerPI",
            "docstring": "Parameters of a Proportional-Integral Reactive Power controller for a specified power reference",
            "fields": [
                {
                    "name": "Kp_q",
                    "comment": "Proportional Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Ki_q",
                    "comment": "Integral Gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ωf",
                    "comment": "filter frequency cutoff",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_ref",
                    "comment": "Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Q_ref",
                    "comment": "Reactive Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ReactivePowerPI model are:\n\tσq_oc: Integrator state of the PI Controller,\n\tq_oc: Measured reactive power of the inverter model",
                    "internal_default": "[:σq_oc, :q_oc]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ReactivePowerPI has two states",
                    "internal_default": 2,
                    "data_type": "Int"
                }
            ],
            "supertype": "ReactivePowerControl"
        },
        {
            "struct_name": "ReactiveVirtualOscillator",
            "docstring": "Parameters of a Reactive Virtual Oscillator controller. Model is based on [\"Model Reduction for Inverters with Current Limiting and Dispatchable Virtual Oscillator Control.\"](https://doi.org/10.1109/TEC.2021.3083488)",
            "fields": [
                {
                    "name": "k2",
                    "comment": "VOC voltage-amplitude control gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "V_ref",
                    "comment": "Reference Voltage Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Q_ref",
                    "comment": "Reference Reactive Power Set-point (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the ReactiveVirtualOscilator model are:\n\tE_oc: voltage reference state for inner control in the d-axis",
                    "internal_default": "[:E_oc]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) ReactiveVirtualOscillator has 1 state",
                    "internal_default": 1,
                    "data_type": "Int"
                }
            ],
            "supertype": "ReactivePowerControl"
        },
        {
            "struct_name": "VoltageModeControl",
            "docstring": "Parameters of an inner loop current control PID using virtual impedance based on [\"A Virtual Synchronous Machine implementation for distributed control of power converters in SmartGrids.\"](https://doi.org/10.1016/j.epsr.2015.01.001)",
            "fields": [
                {
                    "name": "kpv",
                    "comment": "voltage controller proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kiv",
                    "comment": "voltage controller integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kffv",
                    "comment": "Binary variable to enable feed-forward gain of voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rv",
                    "comment": "virtual resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "lv",
                    "comment": "virtual inductance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kpc",
                    "comment": "current controller proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kic",
                    "comment": "current controller integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kffi",
                    "comment": "Binary variable to enable feed-forward gain of current",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ωad",
                    "comment": "active damping filter cutoff frequency (rad/sec)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kad",
                    "comment": "active damping gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the VoltageModeControl model are:\n\tξd_ic: d-axis integrator state of the PI voltage controller,\n\tξq_ic: q-axis integrator state of the PI voltage controller,\n\tγd_ic: d-axis integrator state of the PI current controller,\n\tγq_ic: q-axis integrator state of the PI current controller,\n\tϕd_ic: d-axis low-pass filter of active damping,\n\tϕq_ic: q-axis low-pass filter of active damping",
                    "internal_default": "[:ξd_ic, :ξq_ic, :γd_ic, :γq_ic, :ϕd_ic, :ϕq_ic]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) VoltageModeControl has 6 states",
                    "internal_default": 6,
                    "data_type": "Int"
                }
            ],
            "supertype": "InnerControl"
        },
        {
            "struct_name": "CurrentModeControl",
            "docstring": "Parameters of an inner loop proportional integral (PI) current control based on [\"Reduced-order Structure-preserving Model for Parallel-connected Three-phase Grid-tied Inverters.\"](https://doi.org/10.1109/COMPEL.2017.8013389)",
            "fields": [
                {
                    "name": "kpc",
                    "comment": "Current controller proportional gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kic",
                    "comment": "Current controller integral gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kffv",
                    "comment": "Gain to enable feed-forward gain of voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the CurrentModeControl model are:\n\tγd_ic: d-axis integrator state of the PI current controller,\n\tγq_ic: q-axis integrator state of the PI current controller",
                    "internal_default": "[:γd_ic, :γq_ic]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) CurrentControl has 2 states",
                    "internal_default": 2,
                    "data_type": "Int"
                }
            ],
            "supertype": "InnerControl"
        },
        {
            "struct_name": "RECurrentControlB",
            "docstring": "Parameters of the Inner Control part of the REECB model in PSS/E",
            "fields": [
                {
                    "name": "Q_Flag",
                    "comment": "Q Flag used for I_qinj",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "PQ_Flag",
                    "comment": "PQ Flag used for the Current Limit Logic",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Vdip_lim",
                    "comment": "Limits for Voltage Dip Logic `(Vdip, Vup)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "T_rv",
                    "comment": "Voltage Filter Time Constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "dbd_pnts",
                    "comment": "Voltage error deadband thresholds `(dbd1, dbd2)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "K_qv",
                    "comment": "Reactive current injection gain during over and undervoltage conditions",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Iqinj_lim",
                    "comment": "Limits for Iqinj `(I_qh1, I_ql1)`",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "V_ref0",
                    "comment": "User defined reference. If 0, [`PowerSimulationsDynamics.jl`](https://nrel-sienna.github.io/PowerSimulationsDynamics.jl/stable/) initializes to initial terminal voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_vp",
                    "comment": "Voltage regulator proportional gain (used when QFlag = 1)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "K_vi",
                    "comment": "Voltage regulator integral gain (used when QFlag = 1)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T_iq",
                    "comment": "Time constant for low-pass filter for state q_V when QFlag = 0",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "I_max",
                    "comment": "Maximum limit on total converter current",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of the RECurrentControlB depends on the Flags",
                    "internal_default": "PowerSystems.get_REControlB_states(Q_Flag)",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The states of the RECurrentControlB depends on the Flags",
                    "internal_default": "2",
                    "data_type": "Int"
                }
            ],
            "supertype": "InnerControl"
        },
        {
            "struct_name": "MagnitudeOutputCurrentLimiter",
            "docstring": "Parameters of Magnitude (Circular) Current Controller Limiter. Regulates only the magnitude of the inverter output current",
            "fields": [
                {
                    "name": "I_max",
                    "comment": "Maximum limit on current controller input current in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                }
            ],
            "supertype": "OutputCurrentLimiter"
        },
        {
            "struct_name": "InstantaneousOutputCurrentLimiter",
            "docstring": "Parameters of Instantaneous (Square) Current Controller Limiter. Regulates inverter output current on the d and q axis separately",
            "fields": [
                {
                    "name": "Id_max",
                    "comment": "Maximum limit on d-axis current controller input current in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Iq_max",
                    "comment": "Maximum limit on d-axis current controller input current in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                }
            ],
            "supertype": "OutputCurrentLimiter"
        },
        {
            "struct_name": "PriorityOutputCurrentLimiter",
            "docstring": "Parameters of Priority-Based Current Controller Limiter. Regulates the magnitude of the inverter output current and prioritizes a specific angle for the resultant current signal",
            "fields": [
                {
                    "name": "I_max",
                    "comment": "Maximum limit on current controller input current in pu ([`DEVICE_BASE`](@ref per_unit))",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ϕ_I",
                    "comment": "Pre-defined angle (measured against the d-axis) for I_ref once limit I_max is hit",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": -1.571,
                        "max": 1.571
                    }
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                }
            ],
            "supertype": "OutputCurrentLimiter"
        },
        {
            "struct_name": "SaturationOutputCurrentLimiter",
            "docstring": "Parameters of Saturation Current Controller Limiter. Regulates the magnitude of the inverter output current, and applies a closed loop feedback regulated by a static gain which provides ant-windup",
            "fields": [
                {
                    "name": "I_max",
                    "comment": "Maximum limit on current controller input current (device base)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kw",
                    "comment": "Defined feedback gain",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                }
            ],
            "supertype": "OutputCurrentLimiter"
        },
        {
            "struct_name": "HybridOutputCurrentLimiter",
            "docstring": "Parameters of Hybrid Current Controller Limiter. Regulates the magnitude of the inverter output current, but with a closed loop feedback regulated by a virtual impedance which provides ant-windup. Described in: Novel Hybrid Current Limiter for Grid-Forming Inverter Control During Unbalanced Faults by Baeckland and Seo, 2023 ",
            "fields": [
                {
                    "name": "I_max",
                    "comment": "Maximum limit on current controller input current (device base)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rv",
                    "comment": "Real part of the virtual impedance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "lv",
                    "comment": "Imaginary part of the virtual impedance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ext",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                }
            ],
            "supertype": "OutputCurrentLimiter"
        },
        {
            "struct_name": "AggregateDistributedGenerationA",
            "docstring": "Parameters of the DERA1 model in PSS/E",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "Pf_Flag",
                    "comment": "Flag for Power Factor Control",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Freq_Flag",
                    "comment": "Flag to enable/disable frequency control",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "PQ_Flag",
                    "comment": "Flag used to enforce maximum current",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Gen_Flag",
                    "comment": "Flag to specify generator or storage",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Vtrip_Flag",
                    "comment": "Flag to enable/disable voltage trip logic",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Ftrip_Flag",
                    "comment": "Flag to enable/disable frequency trip logic",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "T_rv",
                    "comment": "Voltage measurement transducer time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Trf",
                    "comment": "Frequency measurement transducer time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "dbd_pnts",
                    "comment": "Voltage deadband thresholds `(dbd1, dbd2)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "K_qv",
                    "comment": "Proportional voltage control gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tp",
                    "comment": "Power measurement transducer time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "T_iq",
                    "comment": "Time constant for low-pass filter for state q_V when QFlag = 0",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_dn",
                    "comment": "Reciprocal of droop for over-frequency conditions (>0) (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_up",
                    "comment": "Reciprocal of droop for under-frequency conditions <=0) (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "fdbd_pnts",
                    "comment": "Frequency control deadband thresholds `(fdbd1, fdbd2)`",
                    "null_value": "(0.0, 0.0)",
                    "data_type": "Tuple{Float64, Float64}"
                },
                {
                    "name": "fe_lim",
                    "comment": "Frequency error limits (femin, femax)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "P_lim",
                    "comment": "Power limits (Pmin, Pmax)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "dP_lim",
                    "comment": "Power reference ramp rate limits (dPmin, dPmax)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Tpord",
                    "comment": "Power filter time constant",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Kpg",
                    "comment": "PI controller proportional gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Kig",
                    "comment": "PI controller integral gain (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "I_max",
                    "comment": "Maximum limit on total converter current (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "vl_pnts",
                    "comment": "Low voltage cutout points `[(tv10, vl0), (tv11, vl1)]`",
                    "null_value": "[(0.0, 0.0), (0.0, 0.0)]",
                    "data_type": "Vector{Tuple{Float64,Float64}}"
                },
                {
                    "name": "vh_pnts",
                    "comment": "High voltage cutout points `[(tvh0, vh0), (tvh1, vh1)]`",
                    "null_value": "[(0.0, 0.0), (0.0, 0.0)]",
                    "data_type": "Vector{Tuple{Float64,Float64}}"
                },
                {
                    "name": "Vrfrac",
                    "comment": "Fraction of device that recovers after voltage comes back to within vl1 < V < vh1 (0 <= Vrfrac <= 1)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "fl",
                    "comment": "Inverter frequency break-point for low frequency cut-out (Hz)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "fh",
                    "comment": "Inverter frequency break-point for high frequency cut-out (Hz)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "tfl",
                    "comment": "Low frequency cut-out timer corresponding to frequency fl (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "tfh",
                    "comment": "High frequency cut-out timer corresponding to frequency fh (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tg",
                    "comment": "Current control time constant (to represent behavior of inner control loops) (> 0) (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rrpwr",
                    "comment": "Ramp rate for real power increase following a fault (pu/s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tv",
                    "comment": "Time constant on the output of the multiplier (s)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Vpr",
                    "comment": "Voltage below which frequency tripping is disabled (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Iq_lim",
                    "comment": "Reactive current injection limits (Iqll, Iqhl)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "V_ref",
                    "comment": "User defined voltage reference. If 0, [`PowerSimulationsDynamics.jl`](https://nrel-sienna.github.io/PowerSimulationsDynamics.jl/stable/) initializes to initial terminal voltage",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Pfa_ref",
                    "comment": "Reference power factor",
                    "null_value": 0,
                    "default": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "ω_ref",
                    "comment": "Reference Frequency (pu)",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Q_ref",
                    "comment": "Reference reactive power, in pu",
                    "null_value": 0,
                    "default": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference active power, in pu",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "base_power",
                    "comment": "Base power (MVA) for [per unitization](@ref per_unit)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "default": "100.0"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of AggregateDistributedGenerationA depends on the Flags",
                    "internal_default": "PowerSystems.get_AggregateDistributedGenerationA_states(Freq_Flag)[1]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The states of AggregateDistributedGenerationA depends on the Flags",
                    "internal_default": "PowerSystems.get_AggregateDistributedGenerationA_states(Freq_Flag)[2]",
                    "data_type": "Int"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DynamicInjection"
        },
        {
            "struct_name": "Source",
            "docstring": "An infinite bus with a constant voltage output.\n\nCommonly used in dynamics simulations to represent a very large machine on a single bus",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "null_value": "false",
                    "name": "available",
                    "comment": "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations",
                    "data_type": "Bool"
                },
                {
                    "name": "bus",
                    "comment": "Bus that this component is connected to",
                    "null_value": "ACBus(nothing)",
                    "data_type": "ACBus"
                },
                {
                    "name": "active_power",
                    "comment": "Initial active power set point of the unit in MW. For power flow, this is the steady state operating point of the system. For production cost modeling, this may or may not be used as the initial starting point for the solver, depending on the solver used",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "reactive_power",
                    "comment": "Initial reactive power set point of the unit (MVAR)",
                    "null_value": "0.0",
                    "data_type": "Float64"
                },
                {
                    "name": "R_th",
                    "comment": "Source Thevenin resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_th",
                    "comment": "Source Thevenin reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "internal_voltage",
                    "comment": "Internal Voltage (pu)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    },
                    "default": "1.0"
                },
                {
                    "name": "internal_angle",
                    "comment": "Internal Angle",
                    "null_value": 0,
                    "data_type": "Float64",
                    "default": "0.0"
                },
                {
                    "name": "base_power",
                    "comment": "Base Power in MVA",
                    "null_value": 0,
                    "data_type": "Float64",
                    "default": "100.0"
                },
                {
                    "name": "dynamic_injector",
                    "data_type": "Union{Nothing, DynamicInjection}",
                    "comment": "corresponding dynamic injection device",
                    "null_value": "nothing",
                    "exclude_setter": true,
                    "default": "nothing"
                },
                {
                    "name": "services",
                    "data_type": "Vector{Service}",
                    "comment": "Services that this device contributes to",
                    "null_value": "Device[]",
                    "default": "Device[]"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "StaticInjection"
        },
        {
            "struct_name": "PeriodicVariableSource",
            "docstring": "This struct acts as an infinity bus with time varying phasor values magnitude and angle V(t) \theta(t). Time varying functions are represented using fourier series",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "R_th",
                    "comment": "Source Thevenin resistance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "X_th",
                    "comment": "Source Thevenin reactance",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "internal_voltage_bias",
                    "comment": "a0 term of the Fourier Series for the voltage",
                    "null_value": 0,
                    "data_type": "Float64",
                    "default": "0.0"
                },
                {
                    "name": "internal_voltage_frequencies",
                    "comment": "Frequencies in radians/s",
                    "null_value": [
                        0
                    ],
                    "data_type": "Vector{Float64}",
                    "default": "[0.0]"
                },
                {
                    "name": "internal_voltage_coefficients",
                    "comment": "Coefficients for terms n > 1. First component corresponds to sin and second component to cos",
                    "null_value": "[(0.0, 0.0)]",
                    "data_type": "Vector{Tuple{Float64,Float64}}",
                    "default": "[(0.0, 0.0)]"
                },
                {
                    "name": "internal_angle_bias",
                    "comment": "a0 term of the Fourier Series for the angle",
                    "null_value": 0,
                    "data_type": "Float64",
                    "default": "0.0"
                },
                {
                    "name": "internal_angle_frequencies",
                    "comment": "Frequencies in radians/s",
                    "null_value": [
                        0
                    ],
                    "data_type": "Vector{Float64}",
                    "default": "[0.0]"
                },
                {
                    "name": "internal_angle_coefficients",
                    "comment": "Coefficients for terms n > 1. First component corresponds to sin and second component to cos",
                    "null_value": "[(0.0, 0.0)]",
                    "data_type": "Vector{Tuple{Float64,Float64}}",
                    "default": "[(0.0, 0.0)]"
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the source (MVA) for [per unitization](@ref per_unit)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "default": "100.0"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) for time, voltage and angle",
                    "internal_default": "[:Vt, :θt]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) PeriodicVariableSource has 2 states",
                    "null_value": 2,
                    "internal_default": 2,
                    "data_type": "Int"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DynamicInjection"
        }, 
        {
            "struct_name": "GenericDER",
            "docstring": "Parameters of a Generic Distributed Energy Resource Model. Based on [\"Modeling Framework and Coordination of DER and Flexible Loads for Ancillary Service Provision.\"](http://hdl.handle.net/10125/70994)",
            "fields": [
                {
                    "null_value": "init",
                    "name": "name",
                    "comment": "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name",
                    "exclude_setter": true,
                    "data_type": "String"
                },
                {
                    "name": "Qref_Flag",
                    "comment": "Reactive Power Control Mode. 1 VoltVar Control, 2 Constant Q Control, 3 Constant PF Control",
                    "null_value": 1,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 1,
                        "max": 3
                    }
                },
                {
                    "name": "PQ_Flag",
                    "comment": "Active and reactive power priority mode. 0 for Q priority, 1 for P priority",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Gen_Flag",
                    "comment": "Define generator or storage system. 0 unit is a storage device, 1 unit is a generator",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "PerOp_Flag",
                    "comment": "Defines operation of permisible region in VRT characteristic. 0 for cease, 1 for continuous operation",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Recon_Flag",
                    "comment": "Defines if DER can reconnect after voltage ride-through disconnection",
                    "null_value": 0,
                    "data_type": "Int",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "Trv",
                    "comment": "Voltage measurement transducer's time constant, in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "VV_pnts",
                    "comment": "Y-axis Volt-var curve points (V1,V2,V3,V4)",
                    "null_value": "(V1=0.0, V2=0.0, V3=0.0, V4=0.0)",
                    "data_type": "NamedTuple{(:V1, :V2, :V3, :V4), Tuple{Float64, Float64, Float64, Float64}}"
                },
                {
                    "name": "Q_lim",
                    "comment": "Reactive power limits in pu (Q_min, Q_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Tp",
                    "comment": "Power measurement transducer's time constant, in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "e_lim",
                    "comment": "Error limit in PI controller for q control (e_min, e_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Kpq",
                    "comment": "PI controller proportional gain for q control",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Kiq",
                    "comment": "PI controller integral gain for q control",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Iqr_lim",
                    "comment": "Limit on rate of change for reactive current (pu/s) (Iqr_min, Iqr_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "I_max",
                    "comment": "Max. inverter's current",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Tg",
                    "comment": "Current control's time constant, in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "kWh_Cap",
                    "comment": "BESS capacity in kWh",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "SOC_ini",
                    "comment": "Initial state of charge (SOC) in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": 1
                    }
                },
                {
                    "name": "SOC_lim",
                    "comment": "Battery's SOC limits (SOC_min, SOC_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Trf",
                    "comment": "Time constant to estimate system frequency, in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "fdbd_pnts",
                    "comment": "Frequency error dead band thresholds `(fdbd1, fdbd2)`",
                    "null_value": "(fdbd1=0.0, fdbd2=0.0)",
                    "data_type": "NamedTuple{(:fdbd1, :fdbd2), Tuple{Float64, Float64}}"
                },
                {
                    "name": "D_dn",
                    "comment": "reciprocal of droop for over-frequency conditions, in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "D_up",
                    "comment": "reciprocal of droop for under-frequency conditions, in pu",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "fe_lim",
                    "comment": "Frequency error limits in pu (fe_min, fe_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Kpp",
                    "comment": "PI controller proportional gain for p control",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Kip",
                    "comment": "PI controller integral gain for p control",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_lim",
                    "comment": "Active power limits in pu (P_min, P_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "dP_lim",
                    "comment": "Ramp rate limits for active power in pu/s (dP_min, dP_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "T_pord",
                    "comment": "Power filter time constant in s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "rrpwr",
                    "comment": "Ramp rate for real power increase following a fault, in pu/s",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "VRT_pnts",
                    "comment": "Voltage ride through v points (vrt1,vrt2,vrt3,vrt4,vrt5)",
                    "null_value": "(vrt1=0.0, vrt2=0.0, vrt3=0.0, vrt4=0.0, vrt5=0.0)",
                    "data_type": "NamedTuple{(:vrt1, :vrt2, :vrt3, :vrt4, :vrt5), Tuple{Float64, Float64, Float64, Float64, Float64}}"
                },
                {
                    "name": "TVRT_pnts",
                    "comment": "Voltage ride through time points (tvrt1,tvrt2,tvrt3)",
                    "null_value": "(tvrt1=0.0, tvrt2=0.0, tvrt3=0.0)",
                    "data_type": "NamedTuple{(:tvrt1, :tvrt2, :tvrt3), Tuple{Float64, Float64, Float64}}"
                },
                {
                    "name": "tV_delay",
                    "comment": "Time delay for reconnection after voltage ride-through disconnection",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "VES_lim",
                    "comment": "Min and max voltage for entering service (VES_min,VES_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "FRT_pnts",
                    "comment": "Frequency ride through v points (frt1,frt2,frt3,frt4)",
                    "null_value": "(frt1=0.0, frt2=0.0, frt3=0.0, frt4=0.0)",
                    "data_type": "NamedTuple{(:frt1, :frt2, :frt3, :frt4), Tuple{Float64, Float64, Float64, Float64}}"
                },
                {
                    "name": "TFRT_pnts",
                    "comment": "Frequency ride through time points (tfrt1,tfrt2)",
                    "null_value": "(tfrt1=0.0, tfrt2=0.0)",
                    "data_type": "NamedTuple{(:tfrt1, :tfrt2), Tuple{Float64, Float64}}"
                },
                {
                    "name": "tF_delay",
                    "comment": "Time delay for reconnection after frequency ride-through disconnection",
                    "null_value": 0,
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "FES_lim",
                    "comment": "Min and max frequency for entering service (FES_min,FES_max)",
                    "null_value": "(min=0.0, max=0.0)",
                    "data_type": "MinMax"
                },
                {
                    "name": "Pfa_ref",
                    "comment": "Reference power factor",
                    "null_value": 0,
                    "default": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "Q_ref",
                    "comment": "Reference reactive power, in pu",
                    "null_value": 0,
                    "default": "0.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "P_ref",
                    "comment": "Reference active power, in pu",
                    "null_value": 0,
                    "default": "1.0",
                    "data_type": "Float64",
                    "valid_range": {
                        "min": 0,
                        "max": null
                    }
                },
                {
                    "name": "base_power",
                    "comment": "Base power of the unit (MVA) for [per unitization](@ref per_unit)",
                    "null_value": 0,
                    "data_type": "Float64",
                    "default": "100.0"
                },
                {
                    "name": "states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of GenericDER depend on the Flags",
                    "internal_default": "PowerSystems.get_GenericDER_states(Qref_Flag)[1]",
                    "data_type": "Vector{Symbol}"
                },
                {
                    "name": "n_states",
                    "exclude_setter": true,
                    "comment": "(**Do not modify.**) The [states](@ref S) of GenericDER depend on the Flags",
                    "internal_default": "PowerSystems.get_GenericDER_states(Qref_Flag)[2]",
                    "data_type": "Int"
                },
                {
                    "name": "ext",
                    "comment": "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.",
                    "data_type": "Dict{String, Any}",
                    "null_value": "Dict{String, Any}()",
                    "default": "Dict{String, Any}()"
                },
                {
                    "name": "internal",
                    "comment": "(**Do not modify.**) PowerSystems.jl internal reference",
                    "data_type": "InfrastructureSystemsInternal",
                    "internal_default": "InfrastructureSystemsInternal()",
                    "exclude_setter": true
                }
            ],
            "supertype": "DynamicInjection"
        }
    ],
    "struct_validation_descriptors": [
    ]
}