#=
This file exists here because HydroTurbine depends on it. Since autogenerated
models sort imports alphabetically, HydroTurbine always appeared first, causing
an import error.
=#

#! format: off

"""
    mutable struct HydroReservoir <: Component
        name::String
        available::Bool
        storage_volume_limits::Union{Nothing, MinMax, TimeSeriesKey}
        spillate_outflow_limits::Union{Nothing, MinMax, TimeSeriesKey}
        inflow::Union{Float64, TimeSeriesKey}
        outflow::Union{Float64, MinMax, TimeSeriesKey}
        volume_targets::Union{Float64, MinMax, TimeSeriesKey}
        travel_time::Union{Float64, MinMax, TimeSeriesKey}
        services::Vector{Service}
        ext::Dict{String, Any}
        internal::InfrastructureSystemsInternal
    end

A hydropower reservoir that needs to have `HydroTurbine` attached to generate power, suitable for modeling indenpendent turbines and reservoirs.

# Arguments
- `name::String`: Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name
- `available::Bool`: Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations
- `storage_volume_limits::Union{Nothing, MinMax, TimeSeriesKey}`: Volume limits for the reservoir in m^3. If nothing, the reservoir volume is assumed to be infinite.
- `spillate_outflow_limits::Union{Nothing, MinMax, TimeSeriesKey}`: Amount of water allowed to be spilled from the reservoir. If nothing, no spillage is allowed.
- `inflow::Union{Float64, TimeSeriesKey}`: Amount of water refilling the reservoir in m^3/h.
- `outflow::Union{Float64, MinMax, TimeSeriesKey}`: Amount of water going to the turbine(s) in m^3/h.
- `volume_targets::Union{Float64, MinMax, TimeSeriesKey}`: Volume target at the end of a simulation as a fraction of the total volume
- `travel_time::Union{Float64, MinMax, TimeSeriesKey}`: Downstream travel time in hours
- `services::Vector{Service}`: (default: `Device[]`) Services that this device contributes to
- `ext::Dict{String, Any}`: (default: `Dict{String, Any}()`) An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude.
- `internal::InfrastructureSystemsInternal`: (**Do not modify.**) PowerSystems.jl internal reference
"""
mutable struct HydroReservoir <: Component
    "Name of the component. Components of the same type (e.g., `PowerLoad`) must have unique names, but components of different types (e.g., `PowerLoad` and `ACBus`) can have the same name"
    name::String
    "Indicator of whether the component is connected and online (`true`) or disconnected, offline, or down (`false`). Unavailable components are excluded during simulations"
    available::Bool
    "Volume limits for the reservoir in m^3. If nothing, the reservoir volume is assumed to be infinite."
    storage_volume_limits::Union{Nothing, MinMax, TimeSeriesKey}
    "Amount of water allowed to be spilled from the reservoir. If nothing, no spillage is allowed."
    spillate_outflow_limits::Union{Nothing, MinMax, TimeSeriesKey}
    "Amount of water refilling the reservoir in m^3/h."
    inflow::Union{Float64, TimeSeriesKey}
    "Amount of water going to the turbine(s) in m^3/h."
    outflow::Union{Float64, MinMax, TimeSeriesKey}
    "Volume target at the end of a simulation as a fraction of the total volume"
    volume_targets::Union{Float64, MinMax, TimeSeriesKey}
    "Downstream travel time in hours"
    travel_time::Union{Float64, MinMax, TimeSeriesKey}
    "Services that this device contributes to"
    services::Vector{Service}
    "An [*ext*ra dictionary](@ref additional_fields) for users to add metadata that are not used in simulation, such as latitude and longitude."
    ext::Dict{String, Any}
    "(**Do not modify.**) PowerSystems.jl internal reference"
    internal::InfrastructureSystemsInternal
end

function HydroReservoir(name, available, storage_volume_limits, spillate_outflow_limits, inflow, outflow, volume_targets, travel_time, services=Device[], ext=Dict{String, Any}(), )
    HydroReservoir(name, available, storage_volume_limits, spillate_outflow_limits, inflow, outflow, volume_targets, travel_time, services, ext, InfrastructureSystemsInternal(), )
end

function HydroReservoir(; name, available, storage_volume_limits, spillate_outflow_limits, inflow, outflow, volume_targets, travel_time, services=Device[], ext=Dict{String, Any}(), internal=InfrastructureSystemsInternal(), )
    HydroReservoir(name, available, storage_volume_limits, spillate_outflow_limits, inflow, outflow, volume_targets, travel_time, services, ext, internal, )
end

# Constructor for demo purposes; non-functional.
function HydroReservoir(::Nothing)
    HydroReservoir(;
        name="init",
        available=false,
        storage_volume_limits=nothing,
        spillate_outflow_limits=nothing,
        inflow=0.0,
        outflow=0.0,
        volume_targets=0.0,
        travel_time=0.0,
        services=Device[],
        ext=Dict{String, Any}(),
    )
end

"""Get [`HydroReservoir`](@ref) `name`."""
get_name(value::HydroReservoir) = value.name
"""Get [`HydroReservoir`](@ref) `available`."""
get_available(value::HydroReservoir) = value.available
"""Get [`HydroReservoir`](@ref) `storage_volume_limits`."""
get_storage_volume_limits(value::HydroReservoir) = value.storage_volume_limits
"""Get [`HydroReservoir`](@ref) `spillate_outflow_limits`."""
get_spillate_outflow_limits(value::HydroReservoir) = value.spillate_outflow_limits
"""Get [`HydroReservoir`](@ref) `inflow`."""
get_inflow(value::HydroReservoir) = value.inflow
"""Get [`HydroReservoir`](@ref) `outflow`."""
get_outflow(value::HydroReservoir) = value.outflow
"""Get [`HydroReservoir`](@ref) `volume_targets`."""
get_volume_targets(value::HydroReservoir) = value.volume_targets
"""Get [`HydroReservoir`](@ref) `travel_time`."""
get_travel_time(value::HydroReservoir) = value.travel_time
"""Get [`HydroReservoir`](@ref) `services`."""
get_services(value::HydroReservoir) = value.services
"""Get [`HydroReservoir`](@ref) `ext`."""
get_ext(value::HydroReservoir) = value.ext
"""Get [`HydroReservoir`](@ref) `internal`."""
get_internal(value::HydroReservoir) = value.internal

"""Set [`HydroReservoir`](@ref) `available`."""
set_available!(value::HydroReservoir, val) = value.available = val
"""Set [`HydroReservoir`](@ref) `storage_volume_limits`."""
set_storage_volume_limits!(value::HydroReservoir, val) = value.storage_volume_limits = val
"""Set [`HydroReservoir`](@ref) `spillate_outflow_limits`."""
set_spillate_outflow_limits!(value::HydroReservoir, val) = value.spillate_outflow_limits = val
"""Set [`HydroReservoir`](@ref) `inflow`."""
set_inflow!(value::HydroReservoir, val) = value.inflow = val
"""Set [`HydroReservoir`](@ref) `outflow`."""
set_outflow!(value::HydroReservoir, val) = value.outflow = val
"""Set [`HydroReservoir`](@ref) `volume_targets`."""
set_volume_targets!(value::HydroReservoir, val) = value.volume_targets = val
"""Set [`HydroReservoir`](@ref) `travel_time`."""
set_travel_time!(value::HydroReservoir, val) = value.travel_time = val
"""Set [`HydroReservoir`](@ref) `services`."""
set_services!(value::HydroReservoir, val) = value.services = val
"""Set [`HydroReservoir`](@ref) `ext`."""
set_ext!(value::HydroReservoir, val) = value.ext = val
